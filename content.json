{"meta":{"title":"少停","subtitle":null,"description":"愿天堂没有bug","author":null,"url":"https://pheromone.github.io"},"pages":[{"title":"categories","date":"2018-05-16T05:42:13.079Z","updated":"2018-03-18T03:30:29.519Z","comments":true,"path":"categories/index.html","permalink":"https://pheromone.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-06-26T10:02:55.400Z","updated":"2018-04-07T07:31:15.567Z","comments":true,"path":"about/index.html","permalink":"https://pheromone.github.io/about/index.html","excerpt":"","text":""},{"title":"search","date":"2018-04-07T08:31:05.000Z","updated":"2018-04-07T08:31:05.277Z","comments":true,"path":"search/index.html","permalink":"https://pheromone.github.io/search/index.html","excerpt":"","text":""},{"title":"留言板","date":"2018-04-01T02:32:51.298Z","updated":"2018-04-01T02:32:51.290Z","comments":true,"path":"message/index.html","permalink":"https://pheromone.github.io/message/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-15T18:39:35.260Z","updated":"2018-03-18T03:30:47.370Z","comments":true,"path":"tags/index.html","permalink":"https://pheromone.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"React学习:简单个人消费记账系统","slug":"前端学习/React学习-简单个人消费记账系统","date":"2018-06-28T16:00:00.000Z","updated":"2018-06-29T06:12:15.511Z","comments":true,"path":"2018/06/29/前端学习/React学习-简单个人消费记账系统/","link":"","permalink":"https://pheromone.github.io/2018/06/29/前端学习/React学习-简单个人消费记账系统/","excerpt":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统.","text":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统.使用脚手架 create-react-app ,后台使用mockAPI模拟,网络请求使用axios,css效果使用bootstrap/4.0.0 .先来个效果图:其主要代码均在../src/components中,主文件是Records.js,具体的消费记录是Record.js,总消费记录是Box.js,消费记录的创建是RecordForm.js,下面是其源码:Records.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175import React, &#123; Component &#125; from &apos;react&apos;;import Record from &apos;./Record&apos;import RecordForm from &apos;./RecordForm&apos;import Box from &apos;./Box&apos;import axios from &apos;axios&apos;export default class Records extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; error:null, //网络错误信息 isLoader:true, //加载标示 records:[] //数据 &#125;; &#125; render() &#123; //根据 error isLoader 显示不同UI //如果error有值,显示errorUI //如果isLoader 为true,显示加载UI //如果isLoader 为false,显示正确数据UI const &#123;error,isLoader,records&#125; = this.state let renderRecords; if(error)&#123; renderRecords = &lt;div&gt;出错了:&#123;error&#125;&lt;/div&gt; &#125;else if(isLoader)&#123; renderRecords = &lt;div&gt;&lt;img src=&#123;require(&apos;./loading.gif&apos;)&#125; /&gt;&lt;/div&gt; &#125;else &#123; renderRecords = ( &lt;div&gt; &lt;table className=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;日期&lt;/th&gt; &lt;th&gt;标题&lt;/th&gt; &lt;th&gt;金额&lt;/th&gt; &lt;th&gt;事件&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;records.map((item,index)=&gt; &lt;Record key =&#123;item.id&#125; record=&#123;item&#125; updateData=&#123;this.updateRecord.bind(this)&#125; deleteData=&#123;this.deleteRecord.bind(this)&#125; /&gt; )&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; ); &#125; return( &lt;div&gt; &lt;h2&gt;消费记录&lt;/h2&gt; &lt;div className=&quot;row mb-3&quot;&gt; &lt;Box text=&quot;收入&quot; type=&quot;success&quot; amount=&#123;this.credits()&#125; /&gt; &lt;Box text=&quot;支出&quot; type=&quot;danger&quot; amount=&#123;this.debits()&#125; /&gt; &lt;Box text=&quot;余额&quot; type=&quot;info&quot; amount=&#123;this.balance()&#125; /&gt; &lt;/div&gt; &lt;RecordForm handleNewRecord = &#123;this.addRecord.bind(this)&#125; /&gt; &#123;renderRecords&#125; &lt;/div&gt; ) &#125; /** * 收入计算 * */ credits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &gt;= 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 支出计算 * */ debits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &lt; 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 余额计算 * */ balance() &#123; return this.credits() + this.debits(); &#125; /** * 更新账单 * */ updateRecord(record, data) &#123; const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.map( (item, index) =&gt; &#123; if(index !== recordIndex) &#123; // This isn&apos;t the item we care about - keep it as-is return item; &#125; // Otherwise, this is the one we want - return an updated value return &#123; ...item, ...data &#125;; &#125;); this.setState(&#123; records: newRecords &#125;); &#125; /** * 删除账单 * */ deleteRecord(record)&#123; // console.log(record) const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.filter( (item, index) =&gt; index !== recordIndex); this.setState(&#123; records: newRecords &#125;); &#125; /** * 把最新数据赋值state * */ addRecord (record) &#123; console.log(record) this.setState(&#123; error:null, isLoader:false, //加载标示 records:[ ...this.state.records, record ] &#125;) &#125; //请求数据 componentDidMount() &#123; var that = this axios.get(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&apos;) .then(response =&gt; that.setState(&#123; isLoader:false, records:response.data &#125;) ) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Record.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import React, &#123; Component &#125; from &apos;react&apos;;import moment from &quot;moment&quot;; //日期格式import axios from &apos;axios&apos;export default class Record extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; edit:false //编辑按钮状态 &#125;; &#125; render() &#123; //如果编辑状态为true,显示编辑状态,否则显示默认状态 if(this.state.edit)&#123; return this.renderEditRow() &#125;else &#123; return this.renderRow() &#125; &#125; renderEditRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&apos;YYYY-MM-DD&apos;); return ( &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;newDate&#125; ref=&quot;date&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.title&#125; ref=&quot;title&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.account&#125; ref=&quot;account&quot; /&gt;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleUpdate.bind(this)&#125;&gt;更新&lt;/button&gt; &lt;button className=&quot;btn btn-danger &quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;取消&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; renderRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&apos;YYYY-MM-DD&apos;); return ( &lt;tr&gt; &lt;td&gt;&#123;newDate&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.title&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.account&#125;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;编辑&lt;/button&gt; &lt;button className=&quot;btn btn-danger&quot; onClick=&#123;this.handleDelete.bind(this)&#125;&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; /** * 编辑按钮点击事件 * 对state edit做取反操作 * */ handleToggle () &#123; this.setState(&#123; edit:!this.state.edit &#125;) &#125; /** * 删除 按钮点击事件 * */ handleDelete (event) &#123; event.preventDefault() var that = this // alert(that.props.record.id) axios.delete(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&apos; + that.props.record.id) .then(response =&gt;&#123; console.log(response) this.props.deleteData(that.props.record) &#125;) .catch(err =&gt;&#123; &#125;) &#125; /** * 更新记录事件 * */ handleUpdate (event) &#123; event.preventDefault() // 方法阻止元素发生默认的行为 const record =&#123; date:this.refs.date.value, title:this.refs.title.value, account:this.refs.account.value &#125; var that = this // alert(that.props.record.id) axios.put(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&apos; + that.props.record.id,&#123; date:record.date, title:record.title, account:record.account &#125;) .then(response =&gt;&#123; this.props.updateData(this.props.record,response.data) this.setState(&#123; edit:false &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Box.js123456789101112131415161718192021/** * 上部的总消费记录 * */import React from &apos;react&apos;;const Box = (&#123; text, type, amount &#125;) =&gt; &#123; return ( &lt;div className=&quot;col&quot;&gt; &lt;div className=&quot;card&quot;&gt; &lt;div className=&#123;`card-header bg-$&#123;type&#125; text-white`&#125;&gt; &#123;text&#125; &lt;/div&gt; &lt;div className=&quot;card-body&quot;&gt; &#123;amount&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );&#125;export default Box RecordForm.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import React, &#123; Component &#125; from &apos;react&apos;;import axios from &apos;axios&apos;export default class RecordForm extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;; &#125; /** * 判断按钮是否可用 * */ valid()&#123; return this.state.date &amp;&amp; this.state.title &amp;&amp; this.state.account; &#125; /** * 输入改变触发 * */ handleChange (event)&#123; let name,obj; name = event.target.name; this.setState(( obj = &#123;&#125;, obj[&quot;&quot; + name] = event.target.value, obj )) &#125; /** * 提交按钮触发 * */ handleSubmit (event)&#123; event.preventDefault() var that = this axios.post(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&apos;,&#123; date:that.state.date, title:that.state.title, account:that.state.account &#125;) .then(response =&gt;&#123; console.log(response); this.props.handleNewRecord(response.data) that.setState(&#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125; render() &#123; return ( &lt;form className=&quot;form-inline mb-2&quot; onSubmit=&#123;this.handleSubmit.bind(this)&#125; &gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.date&#125; className=&quot;form-control&quot; placeholder=&quot;时间&quot; name=&quot;date&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.title&#125; className=&quot;form-control&quot; placeholder=&quot;标题&quot; name=&quot;title&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.account&#125; className=&quot;form-control&quot; placeholder=&quot;账目&quot; name=&quot;account&quot; /&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot; disabled=&#123;!this.valid()&#125; &gt;创建&lt;/button&gt; &lt;/form&gt; ); &#125;&#125; ok,下面是源码:源码地址","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"react-native七牛上传图片","slug":"移动端学习/react-native七牛上传图片","date":"2018-06-25T16:00:00.000Z","updated":"2018-06-26T14:17:32.331Z","comments":true,"path":"2018/06/26/移动端学习/react-native七牛上传图片/","link":"","permalink":"https://pheromone.github.io/2018/06/26/移动端学习/react-native七牛上传图片/","excerpt":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0”","text":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0”首先最大的坑就是七牛官方的这个库:react-native-qiniu,好像是该库的创始人离职了,导致了该库已经荒废,无人更新维护.如果你只是单纯按照github的说明导入该库就使用的话,无论你以什么姿势撸.结果都是Rpc.uploadFile的catch输出错误,错误信息为null………..这个错误信息真让我头大.可喜有人在网上做出了更新,更新代码(需要修改库中的两个源文件../react-native-qiniu/core)如下:rpc.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163import conf from &apos;./conf.js&apos;;import Auth from &apos;./auth&apos;;//发送管理和fop命令,总之就是不上传文件function post(uri, adminToken, content) &#123;var headers = &#123;&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,&#125;;let payload = &#123;headers: headers,method: &apos;POST&apos;,dataType: &apos;json&apos;,timeout: conf.RPC_TIMEOUT,&#125;;if (typeof content === &apos;undefined&apos;) &#123;payload.headers[&apos;Content-Length&apos;] = 0;&#125; else &#123;//carry datapayload.body = content;&#125;if (adminToken) &#123;headers[&apos;Authorization&apos;] = adminToken;&#125;return fetch(uri, payload);&#125;/*** 直传文件* formInput对象如何配置请参考七牛官方文档“直传文件”一节*/function uploadFile(dataParams, policy, callbackUpDate = function () &#123; &#125;, callBackMethod = function () &#123; &#125;) &#123;let params = getParams(dataParams, policy);let uri = params.uri;let data = params.data;let oloaded = null;let responseObj = &#123;&#125;;return new Promise((resolve, reject) =&gt; &#123;if (typeof uri != &apos;string&apos; || uri == &apos;&apos; || typeof data.key == &apos;undefined&apos;) &#123;reject &amp;&amp; reject(null);return;&#125;if (uri[0] == &apos;/&apos;) &#123;uri = &quot;file://&quot; + uri;&#125;//创建xhr并openvar xhr = new XMLHttpRequest();xhr.onreadystatechange = function () &#123;responseObj.readyState = xhr.readyState; //状态0-4responseObj.data = xhr.response;//返回值responseObj.textData = xhr.responseText; //返回值TextresponseObj.status = xhr.status; //状态码// responseObj.message = &quot;&quot;switch (xhr.readyState) &#123;case 0:callBackMethod(responseObj)break;case 1:callBackMethod(responseObj)break;case 2:callBackMethod(responseObj)break;case 3:callBackMethod(responseObj)break;case 4:if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) &#123;if (xhr.status == 200) &#123;callBackMethod(responseObj)&#125;&#125; else &#123;callBackMethod(responseObj)&#125;break;&#125;&#125;;xhr.open(&apos;POST&apos;, conf.UP_HOST);xhr.onload = () =&gt; &#123;if (xhr.status !== 200) &#123;reject &amp;&amp; reject(responseObj);return;&#125;resolve &amp;&amp; resolve(JSON.parse(responseObj.data));&#125;;xhr.onerror = (evt) =&gt; &#123;reject &amp;&amp; reject(evt);return;&#125;; //请求失败xhr.upload.onloadstart = () =&gt; &#123;//上传开始执行方法oloaded = 0;//设置上传开始时，以上传的文件大小为0console(&quot;上传开始&quot;)&#125;;xhr.upload.onprogress = (evt) =&gt; &#123;oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算callbackUpDate(Math.round(oloaded / evt.total * 100), oloaded, evt.total)&#125;;xhr.upload.onloadend = (evt) =&gt; &#123;console(&quot;上传结束&quot;)&#125;;let formdata = creatFormData(params);xhr.send(formdata);&#125;);&#125;//构造上传参数function getParams(data, policy) &#123;let putPolicy = new Auth.Policy(policy);let uptoken = putPolicy.token();data.token = uptoken;let params = &#123;&#125;;params.uri = data.uri;delete data.uri;params.data = data;return params;&#125;/*** 创建一个表单对象,用于上传参数* @param &#123;*&#125; params*/function creatFormData(params) &#123;let formdata = new FormData();let uri = params.uri;let formInput = creatFormInput(uri);let data = params.data;console.log(data)for (let key of Object.keys(data)) &#123;let value = data[key];if (key.charAt(0) === &quot;_&quot;) &#123;formdata.append(&quot;x:&quot; + key.substring(1, key.length), value);&#125; else &#123;formdata.append(key, value);&#125;&#125;formdata.append(&quot;file&quot;, &#123; uri: uri, type: formInput.type, name: formInput.name &#125;);console.log(formdata)return formdata;&#125;/*** 构造表单对象中file对象* @param &#123;*&#125; params*/function creatFormInput(uri) &#123;let formInput = &#123;&#125;;if (typeof formInput.type == &apos;undefined&apos;)formInput.type = &apos;application/octet-stream&apos;;if (typeof formInput.name == &apos;undefined&apos;) &#123;var filePath = uri.split(&quot;/&quot;);if (filePath.length &gt; 0)formInput.name = filePath[filePath.length - 1];elseformInput.name = &quot;&quot;;&#125;return formInput;&#125;export default &#123; uploadFile, post &#125; auth.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152import base64 from &apos;base-64&apos;;import CryptoJS from &quot;crypto-js&quot;;import conf from &quot;./conf.js&quot;;import parse from &apos;url-parse&apos;;function urlsafeBase64Encode(jsonFlags) &#123;var encoded = base64.encode(jsonFlags);return base64ToUrlSafe(encoded);&#125;;function base64ToUrlSafe(v) &#123;return v.replace(/\\//g, &apos;_&apos;).replace(/\\+/g, &apos;-&apos;);&#125;;function hmacSha1(encodedFlags, secretKey) &#123;var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64);return encoded;&#125;;function generateAccessToken(url, body) &#123;var u = parse(url, true);var path = u.pathname;var access = path + &apos;\\n&apos;;if (body) &#123;access += body;&#125;var digest = hmacSha1(access, conf.SECRET_KEY);var safeDigest = base64ToUrlSafe(digest);let token = &apos;QBox &apos; + conf.ACCESS_KEY + &apos;:&apos; + safeDigest;//console.log(token);return token;&#125;;class Policy &#123;constructor(policy) &#123;if (typeof (policy) == &quot;undefined&quot;) &#123;&#125; else &#123;this.policy = policy;if (typeof (policy.deadline) == &quot;undefined&quot; || policy.deadline == null) &#123;this.policy.deadline = 3600 + Math.floor(Date.now() / 1000);&#125;&#125;&#125;_parse2Str(putPolicy) &#123;let str = &quot;&#123;&quot;;let keys = Object.keys(putPolicy);keys.forEach((key, i) =&gt; &#123;let value = putPolicy[key];if (typeof (value) == &quot;object&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:`str = `$&#123;str&#125;&quot;&#123;`Object.keys(value).forEach((key2) =&gt; &#123;let value2 = value[key2];let re = /(\\$\\(.*?\\))/g;if(re.test(value2))&#123;str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:$&#123;value2&#125;,`&#125;else&#123;str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:&quot;$&#123;value2&#125;&quot;,`&#125;&#125;)console.log(keys.length + &quot;::&quot; + i)if (i &gt;= keys.length) &#123;str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;`&#125;else&#123;str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;,`&#125;&#125;else if (typeof (value) == &quot;number&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:$&#123;value&#125;,`&#125;else if (typeof (value) == &quot;string&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,`&#125;else &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,`&#125;&#125;)str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;`;return str;&#125;// _creatStr = (policy) =&gt; &#123;// policy[&apos;deadline&apos;] = this.expires + Math.floor(Date.now() / 1000);// let policyStr = JSON.stringify(policy);// let re = /(\\&quot;\\$\\(.*?\\)\\&quot;)/g;// let newStr = policyStr.replace(re, (value) =&gt; &#123;// return value.substring(1, value.length - 1);// &#125;)// return newStr;// &#125;token = () =&gt; &#123;policStr = this._parse2Str(this.policy);console.log(&quot;policStr&quot;, policStr);var encodedPutPolicy = this._urlsafeBase64Encode(policStr);console.log(&quot;encodedPutPolicy&quot;, encodedPutPolicy);var sign = this._hmacSha1(encodedPutPolicy, conf.SECRET_KEY);var encodedSign = this._base64ToUrlSafe(sign);console.log(&quot;encodedSign&quot;, encodedSign);var uploadToken = conf.ACCESS_KEY + &apos;:&apos; + encodedSign + &apos;:&apos; + encodedPutPolicy;console.log(&quot;uploadToken&quot;, uploadToken);return uploadToken;&#125;_urlsafeBase64Encode = (jsonFlags) =&gt; &#123;var encoded = base64.encode(jsonFlags);return base64ToUrlSafe(encoded);&#125;;_base64ToUrlSafe = (v) =&gt; &#123;return v.replace(/\\//g, &apos;_&apos;).replace(/\\+/g, &apos;-&apos;);&#125;;_hmacSha1 = (encodedFlags, secretKey) =&gt; &#123;var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64);return encoded;&#125;;&#125;class GetPolicy &#123;constructor(expires) &#123;this.expires = expires || 3600;&#125;makeRequest(baseUrl) &#123;var deadline = this.expires + Math.floor(Date.now() / 1000);if (baseUrl.indexOf(&apos;?&apos;) &gt;= 0) &#123;baseUrl += &apos;&amp;e=&apos;;&#125; else &#123;baseUrl += &apos;?e=&apos;;&#125;baseUrl += deadline;var signature = hmacSha1(baseUrl, conf.SECRET_KEY);var encodedSign = base64ToUrlSafe(signature);var downloadToken = conf.ACCESS_KEY + &apos;:&apos; + encodedSign;return baseUrl + &apos;&amp;token=&apos; + downloadToken;&#125;&#125;export default &#123; urlsafeBase64Encode, generateAccessToken, Policy, GetPolicy &#125; ok,改完之后,你就可以愉快的撸自己的业务代码了.至于业务代码我就简单写个例子:其中,Conf.ACCESS_KEY和Conf.SECRET_KEY从七牛账号里面获取,Conf.UP_HOST 从https://developer.qiniu.com/kodo/manual/1671/region-endpoint 里面获取,其中,scope就是七牛里面你自己建立的存储空间名123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107/*** Sample React Native App* https://github.com/facebook/react-native* @flow*/import React, &#123; Component &#125; from &apos;react&apos;;import &#123;Platform,StyleSheet,Text,View,Image&#125; from &apos;react-native&apos;;import Qiniu, &#123; Auth, ImgOps, Conf, Rs, Rpc &#125; from &apos;react-native-qiniu&apos;;//对于七牛修改文件参考: https://blog.csdn.net/qq_33935895/article/details/78775819Conf.ACCESS_KEY = &quot;从七牛账号里面获取&quot;;Conf.SECRET_KEY = &quot;从七牛账号里面获取&quot;;Conf.UP_HOST = &apos;从七牛账号里面获取&apos;; // https://developer.qiniu.com/kodo/manual/1671/region-endpointtype Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123;// 构造constructor(props) &#123;super(props);// 初始状态this.state = &#123;img:&apos;图片url&apos;&#125;;&#125;render() &#123;return (&lt;View style=&#123;styles.container&#125;&gt;&lt;Text style=&#123;styles.instructions&#125; onPress=&#123;()=&gt;this.upload()&#125;&gt;上传&lt;/Text&gt;&lt;Text&gt;&#123;this.state.img&#125;&lt;/Text&gt;&lt;Imagesource=&#123;&#123;uri: this.state.img&#125;&#125;style=&#123;&#123;width:200,height:400&#125;&#125;/&gt;&lt;/View&gt;);&#125;/*** 先上传七牛 获取url* */upload =() =&gt;&#123;var img = &apos;/Users/shaotingzhou/Desktop/qiniuDemo/uploadImg.jpg&apos; //图片路径 如果是从相册获取图片的话,其相册会返回var myDate = new Date();const key = myDate.getTime() + &apos;.jpg&apos;; //上传成功后该key就是图片的url路径//上传参数let params = &#123;uri: img,//图片路径 可以通过第三方工具 如:ImageCropPicker等获取本地图片路径key: key,//要上传的key&#125;//构建上传策略let policy = &#123;scope: &quot;demo&quot;,//记得这里如果格式为&lt;bucket&gt;:&lt;key&gt;形式的话,key要与params里的key保持一致,详见七牛上传策略returnBody://returnBody 详见上传策略&#123;name: &quot;$(fname)&quot;,//获取文件名size: &quot;$(fsize)&quot;,//获取文件大小w: &quot;$(imageInfo.width)&quot;,//...h: &quot;$(imageInfo.height)&quot;,//...hash: &quot;$(etag)&quot;,//...&#125;,&#125;//进行文件上传Rpc.uploadFile(params, policy).then((data) =&gt; &#123;console.log(&apos;上传成功&apos;)var imgUrl = key //七牛上的图片URL 就是之前的key + 你公司域名this.setState(&#123;img: &apos;http://pax8cso07.bkt.clouddn.com/&apos; + key&#125;)&#125;).catch((err) =&gt; &#123;console.log(err)&#125;);&#125;&#125;const styles = StyleSheet.create(&#123;container: &#123;flex: 1,justifyContent: &apos;center&apos;,alignItems: &apos;center&apos;,backgroundColor: &apos;#F5FCFF&apos;,&#125;,welcome: &#123;fontSize: 20,textAlign: &apos;center&apos;,margin: 10,&#125;,instructions: &#123;textAlign: &apos;center&apos;,color: &apos;#333333&apos;,marginBottom: 5,&#125;,&#125;); ok.下面是七牛里面的key对应图,修改后的输出图,最后的例子展示图:下面是源码.其中七牛的修改文件在0.3.0中.源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-navigation前置登录","slug":"移动端学习/react-navigation前置登录","date":"2018-06-15T16:00:00.000Z","updated":"2018-06-16T06:36:06.531Z","comments":true,"path":"2018/06/16/移动端学习/react-navigation前置登录/","link":"","permalink":"https://pheromone.github.io/2018/06/16/移动端学习/react-navigation前置登录/","excerpt":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库.","text":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库. 这里贴一下各库的使用版本: 123456789101112131415161718192021222324252627 &#123; &quot;name&quot;: &quot;lead_the_login&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;mobx&quot;: &quot;^4.3.0&quot;, &quot;mobx-react&quot;: &quot;^5.1.2&quot;, &quot;react&quot;: &quot;16.3.1&quot;, &quot;react-native&quot;: &quot;0.55.4&quot;, &quot;react-navigation&quot;: &quot;1.5.3&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;23.0.1&quot;, &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.5&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;babel-preset-react-native-stage-0&quot;: &quot;^1.0.1&quot;, &quot;jest&quot;: &quot;23.1.0&quot;, &quot;react-test-renderer&quot;: &quot;16.3.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 前置登录主要使用的是react-navigation的tabbar的点击事件. 使用方法可以看 react navigation官方网站 或者 兔佬的简书,至于mbox和react-navigation的使用可以参考之前写的这篇文章:Mobx和react-navigation的使用. 这里不做细说.直接上代码.下面是基本代码结构.准备工作,先把mobx+react-navigation搭建完毕之后.我们在点击我的Tab时,对tabBar点击事件做处理即可,在点击事件里面先获取我们存在Store中的登录状态,根据状态做不同的事情,这里我未处理本地数据持久化工作,只是单纯的存在Mobx中的store中,是为了方便其他地方使用.实际开发中,我们还需要对数据进行持久化操作.主要代码有:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;import &#123; NavigationActions &#125; from &apos;react-navigation&apos;const resetAction = NavigationActions.reset(&#123; index: 0, actions: [ NavigationActions.navigate(&#123;routeName: &apos;Tab&apos;, params: &#123;&#125;&#125;) ]&#125;)@inject(&apos;rootStore&apos;)@observerexport default class TwoView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, tabBarOnPress: (tab) =&gt; &#123; //让tabBar可点击,做前置登录 // navigation.state.params.navigatePress() tab.jumpToIndex(tab.scene.index) &#125;, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text&gt; 登录状态:&#123;this.loginStatus ? &apos;已经登录&apos; : &apos;未登录&apos;&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.loginOutAction()&#125;&gt; 注销 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get loginStatus() &#123; return this.props.rootStore.TwoStore.allDatas.loginStatus; &#125; componentDidMount() &#123; this.props.navigation.setParams(&#123; navigatePress: this.needLogin() &#125;) // 使用这个来调用this &#125; /** * 判断是否需要登录 * */ needLogin =() =&gt;&#123; //判断登录 console.log(&apos;loginStatus&apos;) console.log(this.loginStatus) if(this.loginStatus)&#123; //已经登录 return; &#125;else &#123; //未登录 跳转至登录界面 this.props.navigation.navigate(&apos;LoginView&apos;,&#123;callback:()=&gt;this.getPersonalInfo()&#125;) &#125; &#125; /** * 登录成功的回调方法 * */ getPersonalInfo =() =&gt;&#123; // 请求数据赋值即可 &#125; loginOutAction =() =&gt;&#123; //注销登录 清空本地化数据 和 重置store中的loginStatus this.props.rootStore.TwoStore.allDatas.loginStatus = false this.props.navigation.dispatch(resetAction); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 和登录之后修改store中状态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class LoginView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.loginAction()&#125;&gt; 登录 &lt;/Text&gt; &lt;/View&gt; ); &#125; /** * 登录/注销 可以在store里面执行也可以直接在这里执行,看你习惯 * */ loginAction =() =&gt;&#123; //登录请求 //成功之后,修改loginStatus.本地化数据等等 this.props.rootStore.TwoStore.allDatas.loginStatus = true //返回上一个界面,并回调刷新 this.props.navigation.goBack() this.props.navigation.state.params.callback(); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 效果如图:源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"Mobx + react-navigation的使用","slug":"移动端学习/Mobx-react-navigation的使用","date":"2018-05-26T16:00:00.000Z","updated":"2018-05-27T11:23:33.596Z","comments":true,"path":"2018/05/27/移动端学习/Mobx-react-navigation的使用/","link":"","permalink":"https://pheromone.github.io/2018/05/27/移动端学习/Mobx-react-navigation的使用/","excerpt":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸.","text":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸.Mbox中文文档另外一个基于Mbox和react-navigation的不错项目 废话不多缩,首先,新建一个项目,添加相应库:npm i mobx mobx-react --save 引入Mbox npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev 能够使用@标签 npm i react-navigation --save 引入导航库然后修改一下工程里面的.babelrc: 1234&#123; &quot;presets&quot;: [&quot;react-native&quot;], &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; OK,基本的架子已经搭好.然后新建一个src目录.这里存放基本代码和基本图片之类的. 然后,在入口文件App.js中,先搭建tabBar和导航条.使用react-navigation这里,我使用全局注册并注入mobx，其他地方都可以使用store.import {Provider} from &#39;mobx-react&#39;;然后在src-&gt;Mobx这里新建一个根store的Store.js文件.Store.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; observable, computed, action &#125; from &apos;mobx&apos;import oneInfo from &apos;./OneInfo&apos;import twoInfo from &apos;./TwoInfo&apos;/** * 根store * OneInfo OneInfo数据 * TwoInfo TwoInfo数据*/class RootStore &#123; constructor() &#123; this.OneInfo = new OneInfo(oneInfo,this) this.TwoInfo = new TwoInfo(twoInfo,this) &#125;&#125;// Oneclass OneInfo &#123; @observable allDatas = [] constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125; //加 @action add(num) &#123; this.allDatas.oneNum = num + 1 this.rootStore.TwoInfo.allDatas.twoColor = &apos;red&apos; &#125; //减 @action sub(num) &#123; this.allDatas.oneNum = num - 1 this.rootStore.TwoInfo.allDatas.twoColor = &apos;blue&apos; &#125;&#125;// Twoclass TwoInfo &#123; @observable allDatas = &#123;&#125; constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125;&#125;export default new RootStore() 另外:OneInfo.js 123456789const OneInfo = &#123; &quot;data&quot;: [ ], &quot;isOne&quot; : true, &quot;oneNum&quot; : 0&#125;export default OneInfo; TwoInfo.js 123456789const TwoInfo = &#123; &quot;data&quot;: [ ], &quot;isTwo&quot; : false, &quot;twoColor&quot;:&apos;white&apos;&#125;export default TwoInfo; ok,回到App.js中: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123;Component&#125; from &apos;react&apos;;import &#123;Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123;StackNavigator, TabNavigator, TabBarBottom&#125; from &apos;react-navigation&apos;;// 全局注册并注入mobx，其他地方都可以使用storeimport &#123;Provider&#125; from &apos;mobx-react&apos;;// 获取store实例import store from &apos;./src/Mobx/Store&apos;;import One from &apos;./src/One/One&apos;;import Two from &apos;./src/Two/Two&apos;;export default class TwoDetails extends Component&lt;Props&gt; &#123; render () &#123; return ( &lt;Provider rootStore=&#123;store&#125;&gt; &lt;Navigator onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123; // 只要切换tab,push,pop,这里一定走 console.log (prevState); console.log (currentState); &#125;&#125; /&gt; &lt;/Provider&gt; ); &#125; componentDidMount = () =&gt; &#123; console.disableYellowBox = true; //去除黄色弹框警告 &#125;;&#125;const Tab = TabNavigator ( &#123; One: &#123; screen: One, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &apos;男孩&apos;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&apos;./src/Image/boy_active.png&apos;) : require (&apos;./src/Image/boy.png&apos;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, Two: &#123; screen: Two, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &apos;女孩&apos;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&apos;./src/Image/girl_active.png&apos;) : require (&apos;./src/Image/girl.png&apos;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, &#125;, &#123; tabBarComponent: TabBarBottom, tabBarPosition: &apos;bottom&apos;, swipeEnabled: true, animationEnabled: true, lazy: true, tabBarOptions: &#123; activeTintColor: &apos;#979797&apos;, inactiveTintColor: &apos;#979797&apos;, style: &#123;backgroundColor: &apos;#ffffff&apos;&#125;, &#125;, &#125;);const Navigator = StackNavigator (&#123; Tab: &#123; screen: Tab, &#125;,&#125;);const styles = StyleSheet.create (&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 然后就是基本的UI界面了:One.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class One extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123;&#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.add()&#125;&gt; + 红 &lt;/Text&gt; &lt;Text&gt; One &#123;this.dataSource&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.sub()&#125;&gt; - 蓝 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get dataSource() &#123; return this.props.rootStore.OneInfo.allDatas.oneNum; &#125; /** * + * */ @action add() &#123; this.props.rootStore.OneInfo.add(this.dataSource) &#125; /** * - * */ @action sub() &#123; this.props.rootStore.OneInfo.sub(this.dataSource) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); Two.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class Two extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;[styles.container,&#123;backgroundColor:this.bgColor&#125;]&#125;&gt; &lt;Text&gt; TWO &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get bgColor() &#123; return this.props.rootStore.TwoInfo.allDatas.twoColor; &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); ok,以上就是Mbox+react-navigation的Demo的基本代码了.效果图: 源码 另外:redux+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"后端学习","slug":"后端学习/后端学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:31:45.728Z","comments":true,"path":"2018/03/18/后端学习/后端学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/后端学习/后端学习/","excerpt":"加紧施工中…","text":"加紧施工中…","categories":[{"name":"后端学习","slug":"后端学习","permalink":"https://pheromone.github.io/categories/后端学习/"}],"tags":[{"name":"后端学习","slug":"后端学习","permalink":"https://pheromone.github.io/tags/后端学习/"}]},{"title":"Android和React Native的简单交互","slug":"移动端学习/Android和React Native的简单交互","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:51:33.638Z","comments":true,"path":"2018/03/18/移动端学习/Android和React Native的简单交互/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/Android和React Native的简单交互/","excerpt":"首先在Android原生中.新建class文件TransMissonMoudle:","text":"首先在Android原生中.新建class文件TransMissonMoudle: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Created by shaotingzhou on 2018/3/7. */package com.androidrn.RN;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.WritableMap;import com.facebook.react.bridge.WritableNativeMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import java.text.SimpleDateFormat;import java.util.Date;import javax.annotation.Nullable;public class TransMissonMoudle extends ReactContextBaseJavaModule &#123; private static final String REACT_CLASS = &quot;TransMissonMoudle&quot;; private ReactContext mReactContext; public TransMissonMoudle(ReactApplicationContext reactContext) &#123; super(reactContext); this.mReactContext = reactContext; &#125; @Override public String getName() &#123; return REACT_CLASS; &#125; //延迟0.1秒获取时间。 @ReactMethod public void getTime() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; String time = getTimeMillis(); WritableMap writableMap = new WritableNativeMap(); writableMap.putString(&quot;key&quot;, time); sendTransMisson(mReactContext, &quot;EventName&quot;, writableMap); &#125; &#125;).start(); &#125; private String getTimeMillis() &#123; SimpleDateFormat formatDate = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); Date date = new Date(System.currentTimeMillis()); String time = formatDate.format(date); return time; &#125; /** * RCTDeviceEventEmitter方式 * * @param reactContext * @param eventName 事件名 * @param params 传惨 */ public void sendTransMisson(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName, params); &#125; /** * CallBack方式 * * @param name * @param callback */ @ReactMethod public void callBackTime(String name, Callback callback) &#123; callback.invoke(getTimeMillis()); &#125; /** * Promise方式 * @param name * @param promise */ @ReactMethod public void sendPromiseTime(String name, Promise promise) &#123; WritableMap writableMap=new WritableNativeMap(); writableMap.putString(&quot;age&quot;,&quot;20&quot;); writableMap.putString(&quot;time&quot;,getTimeMillis()); promise.resolve(writableMap); &#125;&#125; 再建class文件TransMissonPackage: 1234567891011121314151617181920212223242526272829303132333435363738package com.androidrn.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * Created by shaotingzhou on 2018/3/7. */public class TransMissonPackage implements ReactPackage &#123; @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); modules.add(new TransMissonMoudle(reactContext));//摇一摇 return modules; &#125;// @Override// public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;// return Collections.emptyList();// &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; List&lt;ViewManager&gt; viewManagerList=new ArrayList&lt;&gt;();// viewManagerList.add(new PTRRefreshManager()); return viewManagerList; &#125;&#125; 接着在MainApplication里引入TransMissonPackage,加入包.如 import com.androidrn.RN.TransMissonPackage; new TransMissonPackage()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.androidrn;import android.app.Application;import com.androidrn.RN.TransMissonPackage;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import java.util.Arrays;import java.util.List;public class MainApplication extends Application implements ReactApplication &#123; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new TransMissonPackage() ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; @Override public void onCreate() &#123; super.onCreate(); SoLoader.init(this, /* native exopackage */ false); &#125;&#125; 我的文件放置情况如图: 然后只需要在RN这边:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &apos;react&apos;;import &#123; AppRegistry, StyleSheet, Text, View, DeviceEventEmitter, NativeModules, ToastAndroid, Platform&#125; from &apos;react-native&apos;;const instructions = Platform.select(&#123; ios: &apos;Press Cmd+R to reload,\\n&apos; + &apos;Cmd+D or shake for dev menu&apos;, android: &apos;Double tap R on your keyboard to reload,\\n&apos; + &apos;Shake or press menu button for dev menu&apos;,&#125;);type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; componentWillMount() &#123; DeviceEventEmitter.addListener(&apos;EventName&apos;, function (msg) &#123; console.log(&apos;DeviceEventEmitter收到消息&apos;+msg); alert(&apos;DeviceEventEmitter收到消息&apos;+ msg.key) &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getDeviceEventEmitterTime.bind(this)&#125; &gt; RCTDeviceEventEmitter获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getCallBackTime.bind(this)&#125; &gt; CallBack获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getPromiseTime.bind(this)&#125; &gt; Promise获取时间 &lt;/Text&gt; &lt;/View&gt; ); &#125; getDeviceEventEmitterTime() &#123; NativeModules.TransMissonMoudle.getTime(); &#125; getCallBackTime() &#123; NativeModules.TransMissonMoudle.callBackTime(&quot;Allure&quot;, (msg) =&gt; &#123; console.log(&apos;callBack:---&apos; + msg); alert(&apos;callBack:---&apos;+msg) &#125; ); &#125; getPromiseTime() &#123; NativeModules.TransMissonMoudle.sendPromiseTime(&quot;Allure&quot;).then(msg=&gt; &#123; console.log(&quot;年龄:&quot; + msg.age + &quot;/n&quot; + &quot;时间:&quot; + msg.time); alert(&quot;年龄&quot; + msg.age + &quot;时间&quot; + msg.time) this.setState(&#123; age: msg.age, time: msg.time, &#125;) &#125;).catch(error=&gt; &#123; console.log(&apos;错误&apos; + error); &#125;); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 源码 效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"其他学习","slug":"其他学习/其他学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:25:38.036Z","comments":true,"path":"2018/03/18/其他学习/其他学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/其他学习/其他学习/","excerpt":"加紧施工中…","text":"加紧施工中…","categories":[{"name":"其他学习","slug":"其他学习","permalink":"https://pheromone.github.io/categories/其他学习/"}],"tags":[{"name":"其他学习","slug":"其他学习","permalink":"https://pheromone.github.io/tags/其他学习/"}]},{"title":"前端精灵图学习","slug":"前端学习/精灵图学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-17T13:54:44.185Z","comments":true,"path":"2018/03/18/前端学习/精灵图学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/前端学习/精灵图学习/","excerpt":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。","text":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。以本地图片为例:精灵图使用其实就是对background-position:x y对图片进行偏移显示而已.下面是代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;html&gt; &lt;head&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; .div0&#123; margin:10px; &#125; .demo1,.demo2,.demo3,.demo4,.demo5,.demo6&#123; display:inline-block; width:17px; height:17px; background-color:transparent; background-image:url(img/精灵图.png); background-repeat:no-repeat; &#125; .demo1&#123; background-position:-38px -37px;&#125; .demo2&#123; background-position:-62px -37px;&#125; .demo3&#123; background-position:-86px -37px;&#125; .demo4&#123; background-position:-110px -37px;&#125; .demo5&#123; background-position:-134px -37px;&#125; .demo6&#123; background-position:-159px -37px;&#125; ul&#123; list-style:none; &#125; ul li &#123; margin:10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;div0&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt; 图标1&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt; 图标2&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt; 图标3&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo4&quot;&gt;&lt;/div&gt; 图标4&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo5&quot;&gt;&lt;/div&gt; 图标5&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo6&quot;&gt;&lt;/div&gt; 图标6&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图: 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"前端马赛克学习","slug":"前端学习/马赛克学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-17T13:45:31.367Z","comments":true,"path":"2018/03/18/前端学习/马赛克学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/前端学习/马赛克学习/","excerpt":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克.","text":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克.完成的功能 选择当地一张图片 点击绘制马赛克 拖动绘制马赛克 为了方便,相关js代码直接写在了index.html中,大致分为加载图片,添加监听,方法触发,绘制小方块(马赛克),计算颜色,数组升维这几个方法,UI部分通过canvas 标签和input 标签绘制.下面是完整的index.html代码 &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;Keywords&quot; content=&quot;马赛克 canvas&quot;&gt; &lt;meta name=&quot;Description&quot; content=&quot;学习前端马赛克&quot;&gt; &lt;/head&gt; &lt;style&gt; canvas { border: 1px black solid; } &lt;/style&gt; &lt;body&gt; &lt;div id=&quot;mask&quot;&gt; &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt; &lt;/canvas&gt; &lt;input type=&quot;file&quot; class=&apos;input&apos;&gt; &lt;/div&gt; &lt;script&gt; var canvas = document.querySelector(&apos;canvas&apos;); var input = document.querySelector(&apos;#mask .input&apos;); var ctx = canvas.getContext(&apos;2d&apos;); var mousedown = false; var t = 15; input.onchange = function () { loadimg(); } /** *加载图片 */ function loadimg() { var img = new Image(); img.src = window.URL.createObjectURL(input.files[0]); img.onload = function () { ctx.drawImage(img, 0, 0, 600, 600); } register(); } /** *添加监听 */ function register() { canvas.addEventListener(&apos;mousedown&apos;, action) canvas.addEventListener(&apos;mousemove&apos;, action) canvas.addEventListener(&apos;mouseup&apos;, action) } /** *方法触发 */ function action(e) { var dx = parseInt(((e.offsetX - t / 2) / t) * t) var dy = parseInt(((e.offsetY - t / 2) / t) * t) if (e.type == &quot;mousedown&quot;) { mousedown = true; computeColor(dx, dy); } if (mousedown &amp;&amp; e.type == &quot;mousemove&quot;) { computeColor(dx, dy); } if (e.type == &quot;mouseup&quot;) { mousedown = false; } } /* * 画小方块 */ function rect(x, y, c) { ctx.beginPath(); ctx.fillStyle = c; var dx = parseInt(x / t)*t,dy = parseInt(y / t)*t ctx.rect(dx, dy, t, t); ctx.fill(); } /** 计算颜色 */ function computeColor(x, y) { var arrList = restore(ctx.getImageData(x,y,t,t).data,4); //一维数组 var vr = 0, vg = 0, vb = 0,al = arrList.length; for(var i = 0; i &lt; al; i++){ vr += arrList[i][0]; vg += arrList[i][1]; vb += arrList[i][2]; var color = &apos;rgb(&apos; + Math.floor(vr/al) + &apos;,&apos; + Math.floor(vg/al) + &apos;,&apos; + Math.floor(vb/al) + &apos;)&apos;; rect(x,y,color); } } /** *数组升维 [1,2,3,4] =&gt; [[1,2],[3,4]] */ function restore(arr, step) { var list = []; var index = 0; var n = Math.floor(arr.length/step); for(var i = 0; i &lt; n ;i++){ list.push(arr.slice(index,index+step)); index += step; } return list; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 效果图: 是不是特别棒,再也不为女朋友照片的隐私犯愁了.ps:现在就差个女朋友了 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"react-native-router-flux初步认识","slug":"移动端学习/react-native-router-flux初步认识","date":"2018-03-18T08:16:47.866Z","updated":"2018-05-25T18:49:34.276Z","comments":true,"path":"2018/03/18/移动端学习/react-native-router-flux初步认识/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/react-native-router-flux初步认识/","excerpt":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31","text":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31效果图:使用方法请参考:参考1参考2我这里不详细说明了,贴出关键代码一看便知.代码基本结构如下: App.js: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123; Navigation, Scene, Router, Modal&#125; from &apos;react-native-router-flux&apos;;import IOS from &apos;./src/ios&apos;;import Android from &apos;./src/android&apos;import Web from &apos;./src/web&apos;import TabIcon from &apos;./src/TabIcon&apos;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Router&gt; &lt;Modal&gt; &lt;Scene key=&quot;root&quot; tabBarPosition=&quot;bottom&quot; tabs&gt; &lt;Scene hideBackImage key=&quot;IOS&quot; title=&quot;苹果&quot; component=&#123;IOS&#125; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/ios.png&apos;)&#125; selectedImage=&#123;require(&apos;./src/image/ios_active.png&apos;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Web&quot; component=&#123;Web&#125; title=&quot;web&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/web.png&apos;)&#125; showLabel = &#123;false&#125; selectedImage=&#123;require(&apos;./src/image/web_active.png&apos;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Android&quot; component=&#123;Android&#125; title=&quot;安卓&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/android.png&apos;)&#125; hideNavBar=&#123;true&#125; //隐藏导航栏 selectedImage=&#123;require(&apos;./src/image/android_active.png&apos;)&#125; /&gt; &lt;/Scene&gt; &lt;/Modal&gt; &lt;/Router&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; tabbarContainer: &#123; flex: 1, backgroundColor: &quot;#f6f6f6&quot;, overflow: &apos;visible&apos; &#125;, tabIconItem: &#123; flex: 1, height: 56, flexDirection: &apos;column&apos;, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 8, paddingRight: 8, backgroundColor: &apos;transparent&apos;, overflow: &apos;visible&apos; &#125;, tabIconImage: &#123; width: 60, height: 60, overflow: &apos;visible&apos; &#125;,&#125;); TabIcon.js 12345678910111213141516171819202122232425262728293031323334353637383940414243import React, &#123;PropTypes, Component&#125; from &apos;react&apos;import &#123;Text, View, Image, StyleSheet&#125; from &apos;react-native&apos;const tabIconStyles = StyleSheet.create(&#123; tabIconItem: &#123; flex: 1, height: 56, flexDirection: &apos;column&apos;, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 8, paddingRight: 8, backgroundColor: &apos;transparent&apos;, &#125;, tabIconImage: &#123; width: 24, height: 24 &#125;, titleText: &#123; marginTop: 5, textAlign: &apos;center&apos;, fontSize: 11 &#125;, titleTextDefaultColor: &#123; color: &apos;black&apos; &#125;, titleTextSelectColor: &#123; color: &apos;red&apos; &#125;, tabItemRow: &#123; flexDirection: &apos;row&apos; &#125;,&#125;);export default TabIcon=(props)=&gt;&#123; return ( &lt;View style=&#123;tabIconStyles.tabIconItem&#125;&gt; &lt;Image style=&#123;tabIconStyles.tabIconImage&#125; source=&#123;props.focused ? props.selectedImage : props.Image&#125;/&gt; &lt;Text&gt;&#123;props.tabTitle&#125;&lt;/Text&gt; &lt;/View&gt; );&#125;; 而至于ios.js,web.js,android.js只是基本的模板界面 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;type Props = &#123;&#125;;export default class IOS extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; 首页 &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"redux和react-navigation的结合使用","slug":"移动端学习/redux和react-navigation的结合使用","date":"2018-03-18T08:16:47.866Z","updated":"2018-05-15T18:42:12.750Z","comments":true,"path":"2018/03/18/移动端学习/redux和react-navigation的结合使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/redux和react-navigation的结合使用/","excerpt":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.","text":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.我代码的目录结构是: 使用的三方库是:1234567891011121314151617181920212223242526272829&#123; &quot;name&quot;: &quot;RN_nav&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;react&quot;: &quot;16.3.0-alpha.1&quot;, &quot;react-native&quot;: &quot;0.54.0&quot;, &quot;react-navigation&quot;: &quot;^1.5.1&quot;, &quot;react-navigation-redux-helpers&quot;: &quot;^1.0.3&quot;, &quot;react-redux&quot;: &quot;^5.0.7&quot;, &quot;redux&quot;: &quot;^3.7.2&quot;, &quot;redux-actions&quot;: &quot;^2.3.0&quot;, &quot;redux-logger&quot;: &quot;^3.0.6&quot;, &quot;redux-thunk&quot;: &quot;^2.2.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;22.4.1&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;jest&quot;: &quot;22.4.2&quot;, &quot;react-test-renderer&quot;: &quot;16.3.0-alpha.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 下面是各文件的源码.App.js1234567891011121314151617181920/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React,&#123; Component &#125; from &apos;react&apos;;import &#123;Provider&#125; from &apos;react-redux&apos;;import store from &apos;./src/store&apos;;import NavigatorPages from &apos;./src/AllPages/TabNavigatorPage&apos;;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Provider store=&#123;store&#125;&gt; &lt;NavigatorPages/&gt; &lt;/Provider&gt; ); &#125;&#125; Allreducerstore.js123456789101112131415161718192021import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;//中间件import logger from &apos;redux-logger&apos;;import thunk from &apos;redux-thunk&apos;;import &#123; createReduxBoundAddListener, createReactNavigationReduxMiddleware,&#125; from &apos;react-navigation-redux-helpers&apos;;//reducersimport reducers from &apos;./Allreducer/index&apos;;//引用react-navigation-redux-helpers组件手动创建中间件,接受state并返回新的state,让路由刷新// Note: createReactNavigationReduxMiddleware must be run before createReduxBoundAddListenerconst middleware = createReactNavigationReduxMiddleware( &quot;App&quot;, state =&gt; state.nav,);export const addListener = createReduxBoundAddListener(&quot;App&quot;);const middleWares = [middleware,thunk,logger];export default applyMiddleware(...middleWares)(createStore)(reducers); FirstPageReducer.js1234567891011121314151617181920212223import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; zglNum:0&#125;;export default handleActions(&#123; ADD:(state,action)=&gt;&#123; // alert(state.zglNum) return &#123; ...state, zglNum:state.zglNum + 1, secondState:&apos;iOS&apos; &#125; &#125;, SUB:(state,action)=&gt;&#123; return &#123; ...state, zglNum:state.zglNum - 1, secondState:&apos;Android&apos; &#125; &#125;&#125;,initialState); SecondPageReducer.js12345678910111213141516/** * Created by shaotingzhou on 2018/3/6. */import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; xxx:0&#125;;export default handleActions(&#123; SECOND:(state,action)=&gt;&#123; return &#123; ...state, xxx:2 &#125; &#125;,&#125;,initialState); index.js12345678910import &#123; combineReducers &#125; from &apos;redux&apos;;import TabNavigatorReducer from &apos;./TabNavigatorReducer&apos;;import FirstPageReducer from &apos;./FirstPageReducer&apos;;import SecondPageReducer from &apos;./SecondPageReducer&apos;;const reducers = combineReducers(&#123; TabNavigatorReducer, FirstPageReducer, SecondPageReducer,&#125;);export default reducers; AllPagesFirstPage.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;ADD,SUB&#125; from &apos;../Actions/FirstPageActions&apos;;class FirstPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;首页&apos;, &#125;; // componentWillUpdate()&#123; // alert(this.props.status); // // &#125; // componentDidUpdate()&#123; // alert(this.props.status); // &#125; // ES6 props // static defaultProps=&#123; // zglNum:0, // &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(ADD()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; + &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; &#123;this.props.zglNum&#125; &lt;/Text&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(SUB()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; - &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; zglNum: store.FirstPageReducer.zglNum //数字&#125;);export default connect(mapStateToProps)(FirstPage); SecondPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;SECOND&#125; from &apos;../Actions/SecondPageActions&apos;;class SecondPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;第二&apos; &#125;; // ES6 props static defaultProps=&#123; secondState:&apos;默认&apos;, &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125; &gt; &lt;Text onPress=&#123;()=&gt;this.onClick()&#125;&gt;&#123;this.props.secondState&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125; onClick =() =&gt;&#123; this.props.navigation.navigate(&apos;Snnn&apos;) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; secondState:store.FirstPageReducer.secondState&#125;);export default connect(mapStateToProps)(SecondPage); NavigatorPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123; Component &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import FirstPage from &apos;./FirstPage&apos;;import SecondPage from &apos;./SecondPage&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import Snnn from &apos;./Snnn&apos;import &#123; StackNavigator, addNavigationHelpers, TabNavigator,&#125; from &apos;react-navigation&apos;;import &#123;addListener&#125; from &apos;../store&apos;;class NavigatorPages extends Component&#123; constructor(props)&#123; super(props); &#125; render()&#123; return( &lt;SimpleAppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch: this.props.dispatch, state: this.props.nav, addListener &#125;)&#125; /&gt; ) &#125;&#125;const Tab = TabNavigator(&#123; page1: &#123; screen: FirstPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;苹果233&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/one_selected.png&apos;) : require(&apos;../../image/one.png&apos;)&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;, page2: &#123; screen: SecondPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;安卓&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/two_selected.png&apos;) : require(&apos;../../image/two.png&apos;) &#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;,&#125;,&#123; initialRouteName: &apos;page1&apos;, swipeEnabled: true, animationEnabled: true, tabBarPosition:&apos;bottom&apos;, lazy: false, tabBarOptions: &#123; showIcon: true, activeTintColor: &apos;#979797&apos;, inactiveTintColor: &apos;#979797&apos;, style: &#123; backgroundColor: &apos;#ffffff&apos; &#125;, &#125;&#125;);export const SimpleAppNavigator = StackNavigator(&#123; Tab: &#123; screen: Tab, &#125;, page1 : &#123; screen: FirstPage, &#125;, page2 : &#123; screen: SecondPage &#125;, Snnn : &#123; screen: Snnn &#125;&#125;);const mapStateToProps = (store)=&gt;(&#123; nav : store.TabNavigatorReducer,&#125;);export default connect(mapStateToProps)(NavigatorPages); ActionsActionsTypes.js12345//Tab1export const ADD = &apos;ADD&apos;;export const SUB = &apos;SUB&apos;;//Tab2 FirstPageActions.js1234import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;;export const ADD = createAction(TYPES.ADD);export const SUB = createAction(TYPES.SUB); SccondPageActions.js12345/** * Created by shaotingzhou on 2018/3/6. */import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;; 源码效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-navigation的基本使用","slug":"移动端学习/react-navigation的基本使用","date":"2018-03-18T06:50:06.825Z","updated":"2018-05-15T18:41:51.541Z","comments":true,"path":"2018/03/18/移动端学习/react-navigation的基本使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/react-navigation的基本使用/","excerpt":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.","text":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.实现的基本功能 tabBar 导航栏 在static中使用this 回调 跳多级界面 防止连续点击多次跳转界面并且上面这些方法均未修改三方库的源码,原先需要修改源码实现:原版对于react-navigation的使用看官方文档即可.防止连续点击多次跳转界面 通过state判断:先定义个state waiting 为 false ,再定义点击事件的 disabled={this.state.waiting} ,在响应方法里面先行修改statewaiting 为 true,然后跳转界面,最后在下方定一个计时器,2秒后再次修改state 为false 即可.完整代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image, TouchableOpacity&#125; from &apos;react-native&apos;;type Props = &#123;&#125;;export default class OneDetails extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; waiting:false//防止多次重复点击 &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;this.onclickBtn()&#125; disabled=&#123;this.state.waiting&#125;&gt; &lt;Text&gt;点击跳转&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125; onclickBtn =() =&gt;&#123; this.setState(&#123;waiting: true&#125;); this.props.navigation.navigate(&apos;OneDetailsFlat&apos;) setTimeout(()=&gt; &#123; this.setState(&#123;waiting: false&#125;) &#125;, 2000);//2秒后重置state中的waiting状态 &#125;&#125; 在static中使用this 先在componentDidMount里123456//设置在static中使用this componentDidMount()&#123; this.props.navigation.setParams(&#123; navigatePress:this.navigatePress &#125;) &#125; 然后就可以:123456789static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123; title: &apos;ListView&apos;, headerStyle:&#123;backgroundColor:&apos;red&apos;&#125;, headerRight:( &lt;Text onPress=&#123;()=&gt;navigation.state.params.navigatePress()&#125;&gt; 点击 &lt;/Text&gt; ) &#125;); 使用:1234//导航条按钮点击 navigatePress = () =&gt; &#123; alert(this.state.text) &#125; 回调 在A push 到 B的时候先行定义个方法,然后在B pop 回A调用即可.A -&gt; B1234567891011//导航条按钮点击navigatePress = () =&gt; &#123; this.props.navigation.navigate(&apos;OneDetailsFlatDetails&apos;,&#123; // 跳转的时候携带一个参数去下个页面 callback: (data)=&gt;&#123; alert(data) &#125; &#125;);&#125; B -&gt; A1234popTwo =() =&gt;&#123; this.props.navigation.state.params.callback(&apos;回调参数&apos;); this.props.navigation.goBack() &#125; 回到首页 this.props.navigation.popToTop()回到相应页 this.props.navigation.pop(2)效果图: 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]}]}
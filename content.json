{"meta":{"title":"少停","subtitle":null,"description":"愿天堂没有bug","author":null,"url":"https://pheromone.github.io"},"pages":[{"title":"","date":"2018-04-01T02:14:53.075Z","updated":"2018-04-01T02:14:53.064Z","comments":true,"path":"about/index.html","permalink":"https://pheromone.github.io/about/index.html","excerpt":"","text":"关于我 @media (max-width: 768px) { body { background-color: #f0f0f0; background: url('/imgs/xsbg.gif'); background-attachment: fixed; } } AV.init({ appId: 'npHNPYvfm9QPD0QTUGPpeyHp-gzGzoHsz', appKey: 'To3dnra4TCduaPXz0DNPu1kz' }) 最新评论 // 配置highslide hs.graphicsDir = '/js/highslide/graphics/' hs.outlineType = \"rounded-white\"; hs.dimmingOpacity = 0.8; hs.outlineWhileAnimating = true; hs.showCredits = false; hs.captionEval = \"this.thumb.alt\"; hs.numberPosition = \"caption\"; hs.align = \"center\"; hs.transitions = [\"expand\", \"crossfade\"]; hs.lang.number = '共%2张图, 当前是第%1张'; hs.addSlideshow({ interval: 5000, repeat: true, useControls: true, fixedControls: \"fit\", overlayOptions: { opacity: 0.75, position: \"bottom center\", hideOnMouseOut: true } }) // 初始化aos AOS.init({ duration: 1000, delay: 0, easing: 'ease-out-back' }); POWERMODE.colorful = 'true'; // make power mode colorful POWERMODE.shake = 'true'; // turn off shake // TODO 这里根据具体情况修改 document.body.addEventListener('input', POWERMODE); window.slideConfig = { prefix: '/imgs/slide/background', ext: 'jpg', maxCount: '6' } if(window.commentConfig) { window.commentConfig.id = 'Sat Mar 31 2018 21:46:10 GMT+0800', window.commentConfig.owner = 'pheromone' window.commentConfig.repo = 'pheromone.github.io' window.commentConfig.client_id = '3ce73da9fde666a12f54' window.commentConfig.client_secret = '03a4ed8274a7c2c727b968bb3be84baba6d93723' window.commentConfig.redirect_uri = '' } else { window.commentConfig = { id: 'Sat Mar 31 2018 21:46:10 GMT+0800', owner: 'pheromone', repo: 'pheromone.github.io', client_id: '3ce73da9fde666a12f54', client_secret: '03a4ed8274a7c2c727b968bb3be84baba6d93723', redirect_uri: '' } } window.hot_posts_count = '10' // window.use_leancloud = 'true' if(window.commentConfig) { window.commentConfig.id = 'Sat Mar 31 2018 21:46:10 GMT+0800' window.commentConfig.owner = 'pheromone' window.commentConfig.repo = 'pheromone.github.io' window.commentConfig.client_id = '3ce73da9fde666a12f54' window.commentConfig.client_secret = '03a4ed8274a7c2c727b968bb3be84baba6d93723' window.commentConfig.redirect_uri = '' } else { window.commentConfig = { id: 'Sat Mar 31 2018 21:46:10 GMT+0800', owner: 'pheromone', repo: 'pheromone.github.io', client_id: '3ce73da9fde666a12f54', client_secret: '03a4ed8274a7c2c727b968bb3be84baba6d93723', redirect_uri: '' } }"},{"title":"categories","date":"2018-04-01T01:20:08.147Z","updated":"2018-03-18T03:30:29.519Z","comments":true,"path":"categories/index.html","permalink":"https://pheromone.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-04-01T02:13:52.449Z","updated":"2018-04-01T02:13:52.442Z","comments":true,"path":"message/index.html","permalink":"https://pheromone.github.io/message/index.html","excerpt":"","text":"留言板 @media (max-width: 768px) { body { background-color: #f0f0f0; background: url('/imgs/xsbg.gif'); background-attachment: fixed; } } AV.init({ appId: 'npHNPYvfm9QPD0QTUGPpeyHp-gzGzoHsz', appKey: 'To3dnra4TCduaPXz0DNPu1kz' }) 最新评论 // 配置highslide hs.graphicsDir = '/js/highslide/graphics/' hs.outlineType = \"rounded-white\"; hs.dimmingOpacity = 0.8; hs.outlineWhileAnimating = true; hs.showCredits = false; hs.captionEval = \"this.thumb.alt\"; hs.numberPosition = \"caption\"; hs.align = \"center\"; hs.transitions = [\"expand\", \"crossfade\"]; hs.lang.number = '共%2张图, 当前是第%1张'; hs.addSlideshow({ interval: 5000, repeat: true, useControls: true, fixedControls: \"fit\", overlayOptions: { opacity: 0.75, position: \"bottom center\", hideOnMouseOut: true } }) // 初始化aos AOS.init({ duration: 1000, delay: 0, easing: 'ease-out-back' }); POWERMODE.colorful = 'true'; // make power mode colorful POWERMODE.shake = 'true'; // turn off shake // TODO 这里根据具体情况修改 document.body.addEventListener('input', POWERMODE); window.slideConfig = { prefix: '/imgs/slide/background', ext: 'jpg', maxCount: '6' } if(window.commentConfig) { window.commentConfig.id = 'Sat Mar 31 2018 21:46:10 GMT+0800', window.commentConfig.owner = 'pheromone' window.commentConfig.repo = 'pheromone.github.io' window.commentConfig.client_id = '3ce73da9fde666a12f54' window.commentConfig.client_secret = '03a4ed8274a7c2c727b968bb3be84baba6d93723' window.commentConfig.redirect_uri = '' } else { window.commentConfig = { id: 'Sat Mar 31 2018 21:46:10 GMT+0800', owner: 'pheromone', repo: 'pheromone.github.io', client_id: '3ce73da9fde666a12f54', client_secret: '03a4ed8274a7c2c727b968bb3be84baba6d93723', redirect_uri: '' } } window.hot_posts_count = '10' // window.use_leancloud = 'true' if(window.commentConfig) { window.commentConfig.id = 'Sat Mar 31 2018 21:46:10 GMT+0800' window.commentConfig.owner = 'pheromone' window.commentConfig.repo = 'pheromone.github.io' window.commentConfig.client_id = '3ce73da9fde666a12f54' window.commentConfig.client_secret = '03a4ed8274a7c2c727b968bb3be84baba6d93723' window.commentConfig.redirect_uri = '' } else { window.commentConfig = { id: 'Sat Mar 31 2018 21:46:10 GMT+0800', owner: 'pheromone', repo: 'pheromone.github.io', client_id: '3ce73da9fde666a12f54', client_secret: '03a4ed8274a7c2c727b968bb3be84baba6d93723', redirect_uri: '' } }"},{"title":"tags","date":"2018-04-01T01:49:18.544Z","updated":"2018-03-18T03:30:47.370Z","comments":true,"path":"tags/index.html","permalink":"https://pheromone.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android和React Native的简单交互","slug":"React Native/Android和React Native的简单交互","date":"2018-03-18T08:18:48.245Z","updated":"2018-03-31T11:16:06.156Z","comments":true,"path":"2018/03/18/React Native/Android和React Native的简单交互/","link":"","permalink":"https://pheromone.github.io/2018/03/18/React Native/Android和React Native的简单交互/","excerpt":"首先在Android原生中.新建class文件TransMissonMoudle:","text":"首先在Android原生中.新建class文件TransMissonMoudle: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Created by shaotingzhou on 2018/3/7. */package com.androidrn.RN;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.WritableMap;import com.facebook.react.bridge.WritableNativeMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import java.text.SimpleDateFormat;import java.util.Date;import javax.annotation.Nullable;public class TransMissonMoudle extends ReactContextBaseJavaModule &#123; private static final String REACT_CLASS = &quot;TransMissonMoudle&quot;; private ReactContext mReactContext; public TransMissonMoudle(ReactApplicationContext reactContext) &#123; super(reactContext); this.mReactContext = reactContext; &#125; @Override public String getName() &#123; return REACT_CLASS; &#125; //延迟0.1秒获取时间。 @ReactMethod public void getTime() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; String time = getTimeMillis(); WritableMap writableMap = new WritableNativeMap(); writableMap.putString(&quot;key&quot;, time); sendTransMisson(mReactContext, &quot;EventName&quot;, writableMap); &#125; &#125;).start(); &#125; private String getTimeMillis() &#123; SimpleDateFormat formatDate = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); Date date = new Date(System.currentTimeMillis()); String time = formatDate.format(date); return time; &#125; /** * RCTDeviceEventEmitter方式 * * @param reactContext * @param eventName 事件名 * @param params 传惨 */ public void sendTransMisson(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName, params); &#125; /** * CallBack方式 * * @param name * @param callback */ @ReactMethod public void callBackTime(String name, Callback callback) &#123; callback.invoke(getTimeMillis()); &#125; /** * Promise方式 * @param name * @param promise */ @ReactMethod public void sendPromiseTime(String name, Promise promise) &#123; WritableMap writableMap=new WritableNativeMap(); writableMap.putString(&quot;age&quot;,&quot;20&quot;); writableMap.putString(&quot;time&quot;,getTimeMillis()); promise.resolve(writableMap); &#125;&#125; 再建class文件TransMissonPackage: 1234567891011121314151617181920212223242526272829303132333435363738package com.androidrn.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * Created by shaotingzhou on 2018/3/7. */public class TransMissonPackage implements ReactPackage &#123; @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); modules.add(new TransMissonMoudle(reactContext));//摇一摇 return modules; &#125;// @Override// public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;// return Collections.emptyList();// &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; List&lt;ViewManager&gt; viewManagerList=new ArrayList&lt;&gt;();// viewManagerList.add(new PTRRefreshManager()); return viewManagerList; &#125;&#125; 接着在MainApplication里引入TransMissonPackage,加入包.如 import com.androidrn.RN.TransMissonPackage; new TransMissonPackage()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.androidrn;import android.app.Application;import com.androidrn.RN.TransMissonPackage;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import java.util.Arrays;import java.util.List;public class MainApplication extends Application implements ReactApplication &#123; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new TransMissonPackage() ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; @Override public void onCreate() &#123; super.onCreate(); SoLoader.init(this, /* native exopackage */ false); &#125;&#125; 我的文件放置情况如图: 然后只需要在RN这边:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &apos;react&apos;;import &#123; AppRegistry, StyleSheet, Text, View, DeviceEventEmitter, NativeModules, ToastAndroid, Platform&#125; from &apos;react-native&apos;;const instructions = Platform.select(&#123; ios: &apos;Press Cmd+R to reload,\\n&apos; + &apos;Cmd+D or shake for dev menu&apos;, android: &apos;Double tap R on your keyboard to reload,\\n&apos; + &apos;Shake or press menu button for dev menu&apos;,&#125;);type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; componentWillMount() &#123; DeviceEventEmitter.addListener(&apos;EventName&apos;, function (msg) &#123; console.log(&apos;DeviceEventEmitter收到消息&apos;+msg); alert(&apos;DeviceEventEmitter收到消息&apos;+ msg.key) &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getDeviceEventEmitterTime.bind(this)&#125; &gt; RCTDeviceEventEmitter获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getCallBackTime.bind(this)&#125; &gt; CallBack获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getPromiseTime.bind(this)&#125; &gt; Promise获取时间 &lt;/Text&gt; &lt;/View&gt; ); &#125; getDeviceEventEmitterTime() &#123; NativeModules.TransMissonMoudle.getTime(); &#125; getCallBackTime() &#123; NativeModules.TransMissonMoudle.callBackTime(&quot;Allure&quot;, (msg) =&gt; &#123; console.log(&apos;callBack:---&apos; + msg); alert(&apos;callBack:---&apos;+msg) &#125; ); &#125; getPromiseTime() &#123; NativeModules.TransMissonMoudle.sendPromiseTime(&quot;Allure&quot;).then(msg=&gt; &#123; console.log(&quot;年龄:&quot; + msg.age + &quot;/n&quot; + &quot;时间:&quot; + msg.time); alert(&quot;年龄&quot; + msg.age + &quot;时间&quot; + msg.time) this.setState(&#123; age: msg.age, time: msg.time, &#125;) &#125;).catch(error=&gt; &#123; console.log(&apos;错误&apos; + error); &#125;); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 源码 效果图:","categories":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/categories/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/tags/React-Native/"}]},{"title":"redux和react-navigation的结合使用","slug":"React Native/redux和react-navigation的结合使用","date":"2018-03-18T08:16:47.866Z","updated":"2018-03-18T12:25:47.023Z","comments":true,"path":"2018/03/18/React Native/redux和react-navigation的结合使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/React Native/redux和react-navigation的结合使用/","excerpt":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.","text":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.我代码的目录结构是: 使用的三方库是:1234567891011121314151617181920212223242526272829&#123; &quot;name&quot;: &quot;RN_nav&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;react&quot;: &quot;16.3.0-alpha.1&quot;, &quot;react-native&quot;: &quot;0.54.0&quot;, &quot;react-navigation&quot;: &quot;^1.5.1&quot;, &quot;react-navigation-redux-helpers&quot;: &quot;^1.0.3&quot;, &quot;react-redux&quot;: &quot;^5.0.7&quot;, &quot;redux&quot;: &quot;^3.7.2&quot;, &quot;redux-actions&quot;: &quot;^2.3.0&quot;, &quot;redux-logger&quot;: &quot;^3.0.6&quot;, &quot;redux-thunk&quot;: &quot;^2.2.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;22.4.1&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;jest&quot;: &quot;22.4.2&quot;, &quot;react-test-renderer&quot;: &quot;16.3.0-alpha.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 下面是各文件的源码.App.js1234567891011121314151617181920/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React,&#123; Component &#125; from &apos;react&apos;;import &#123;Provider&#125; from &apos;react-redux&apos;;import store from &apos;./src/store&apos;;import NavigatorPages from &apos;./src/AllPages/TabNavigatorPage&apos;;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Provider store=&#123;store&#125;&gt; &lt;NavigatorPages/&gt; &lt;/Provider&gt; ); &#125;&#125; Allreducerstore.js123456789101112131415161718192021import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;//中间件import logger from &apos;redux-logger&apos;;import thunk from &apos;redux-thunk&apos;;import &#123; createReduxBoundAddListener, createReactNavigationReduxMiddleware,&#125; from &apos;react-navigation-redux-helpers&apos;;//reducersimport reducers from &apos;./Allreducer/index&apos;;//引用react-navigation-redux-helpers组件手动创建中间件,接受state并返回新的state,让路由刷新// Note: createReactNavigationReduxMiddleware must be run before createReduxBoundAddListenerconst middleware = createReactNavigationReduxMiddleware( &quot;App&quot;, state =&gt; state.nav,);export const addListener = createReduxBoundAddListener(&quot;App&quot;);const middleWares = [middleware,thunk,logger];export default applyMiddleware(...middleWares)(createStore)(reducers); FirstPageReducer.js1234567891011121314151617181920212223import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; zglNum:0&#125;;export default handleActions(&#123; ADD:(state,action)=&gt;&#123; // alert(state.zglNum) return &#123; ...state, zglNum:state.zglNum + 1, secondState:&apos;iOS&apos; &#125; &#125;, SUB:(state,action)=&gt;&#123; return &#123; ...state, zglNum:state.zglNum - 1, secondState:&apos;Android&apos; &#125; &#125;&#125;,initialState); SecondPageReducer.js12345678910111213141516/** * Created by shaotingzhou on 2018/3/6. */import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; xxx:0&#125;;export default handleActions(&#123; SECOND:(state,action)=&gt;&#123; return &#123; ...state, xxx:2 &#125; &#125;,&#125;,initialState); index.js12345678910import &#123; combineReducers &#125; from &apos;redux&apos;;import TabNavigatorReducer from &apos;./TabNavigatorReducer&apos;;import FirstPageReducer from &apos;./FirstPageReducer&apos;;import SecondPageReducer from &apos;./SecondPageReducer&apos;;const reducers = combineReducers(&#123; TabNavigatorReducer, FirstPageReducer, SecondPageReducer,&#125;);export default reducers; AllPagesFirstPage.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;ADD,SUB&#125; from &apos;../Actions/FirstPageActions&apos;;class FirstPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;首页&apos;, &#125;; // componentWillUpdate()&#123; // alert(this.props.status); // // &#125; // componentDidUpdate()&#123; // alert(this.props.status); // &#125; // ES6 props // static defaultProps=&#123; // zglNum:0, // &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(ADD()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; + &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; &#123;this.props.zglNum&#125; &lt;/Text&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(SUB()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; - &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; zglNum: store.FirstPageReducer.zglNum //数字&#125;);export default connect(mapStateToProps)(FirstPage); SecondPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;SECOND&#125; from &apos;../Actions/SecondPageActions&apos;;class SecondPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;第二&apos; &#125;; // ES6 props static defaultProps=&#123; secondState:&apos;默认&apos;, &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125; &gt; &lt;Text onPress=&#123;()=&gt;this.onClick()&#125;&gt;&#123;this.props.secondState&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125; onClick =() =&gt;&#123; this.props.navigation.navigate(&apos;Snnn&apos;) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; secondState:store.FirstPageReducer.secondState&#125;);export default connect(mapStateToProps)(SecondPage); NavigatorPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123; Component &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import FirstPage from &apos;./FirstPage&apos;;import SecondPage from &apos;./SecondPage&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import Snnn from &apos;./Snnn&apos;import &#123; StackNavigator, addNavigationHelpers, TabNavigator,&#125; from &apos;react-navigation&apos;;import &#123;addListener&#125; from &apos;../store&apos;;class NavigatorPages extends Component&#123; constructor(props)&#123; super(props); &#125; render()&#123; return( &lt;SimpleAppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch: this.props.dispatch, state: this.props.nav, addListener &#125;)&#125; /&gt; ) &#125;&#125;const Tab = TabNavigator(&#123; page1: &#123; screen: FirstPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;苹果233&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/one_selected.png&apos;) : require(&apos;../../image/one.png&apos;)&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;, page2: &#123; screen: SecondPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;安卓&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/two_selected.png&apos;) : require(&apos;../../image/two.png&apos;) &#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;,&#125;,&#123; initialRouteName: &apos;page1&apos;, swipeEnabled: true, animationEnabled: true, tabBarPosition:&apos;bottom&apos;, lazy: false, tabBarOptions: &#123; showIcon: true, activeTintColor: &apos;#979797&apos;, inactiveTintColor: &apos;#979797&apos;, style: &#123; backgroundColor: &apos;#ffffff&apos; &#125;, &#125;&#125;);export const SimpleAppNavigator = StackNavigator(&#123; Tab: &#123; screen: Tab, &#125;, page1 : &#123; screen: FirstPage, &#125;, page2 : &#123; screen: SecondPage &#125;, Snnn : &#123; screen: Snnn &#125;&#125;);const mapStateToProps = (store)=&gt;(&#123; nav : store.TabNavigatorReducer,&#125;);export default connect(mapStateToProps)(NavigatorPages); ActionsActionsTypes.js12345//Tab1export const ADD = &apos;ADD&apos;;export const SUB = &apos;SUB&apos;;//Tab2 FirstPageActions.js1234import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;;export const ADD = createAction(TYPES.ADD);export const SUB = createAction(TYPES.SUB); SccondPageActions.js12345/** * Created by shaotingzhou on 2018/3/6. */import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;; 源码效果图:","categories":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/categories/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/tags/React-Native/"}]},{"title":"react-navigation的基本使用","slug":"React Native/react-navigation的基本使用","date":"2018-03-18T06:50:06.825Z","updated":"2018-03-18T11:54:12.870Z","comments":true,"path":"2018/03/18/React Native/react-navigation的基本使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/React Native/react-navigation的基本使用/","excerpt":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.","text":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.实现的基本功能 tabBar 导航栏 在static中使用this 回调 跳多级界面 防止连续点击多次跳转界面并且上面这些方法均未修改三方库的源码,原先需要修改源码实现:原版对于react-navigation的使用看官方文档即可.防止连续点击多次跳转界面 通过state判断:先定义个state waiting 为 false ,再定义点击事件的 disabled={this.state.waiting} ,在响应方法里面先行修改statewaiting 为 true,然后跳转界面,最后在下方定一个计时器,2秒后再次修改state 为false 即可.完整代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image, TouchableOpacity&#125; from &apos;react-native&apos;;type Props = &#123;&#125;;export default class OneDetails extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; waiting:false//防止多次重复点击 &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;this.onclickBtn()&#125; disabled=&#123;this.state.waiting&#125;&gt; &lt;Text&gt;点击跳转&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125; onclickBtn =() =&gt;&#123; this.setState(&#123;waiting: true&#125;); this.props.navigation.navigate(&apos;OneDetailsFlat&apos;) setTimeout(()=&gt; &#123; this.setState(&#123;waiting: false&#125;) &#125;, 2000);//2秒后重置state中的waiting状态 &#125;&#125; 在static中使用this 先在componentDidMount里123456//设置在static中使用this componentDidMount()&#123; this.props.navigation.setParams(&#123; navigatePress:this.navigatePress &#125;) &#125; 然后就可以:123456789static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123; title: &apos;ListView&apos;, headerStyle:&#123;backgroundColor:&apos;red&apos;&#125;, headerRight:( &lt;Text onPress=&#123;()=&gt;navigation.state.params.navigatePress()&#125;&gt; 点击 &lt;/Text&gt; ) &#125;); 使用:1234//导航条按钮点击 navigatePress = () =&gt; &#123; alert(this.state.text) &#125; 回调 在A push 到 B的时候先行定义个方法,然后在B pop 回A调用即可.A -&gt; B1234567891011//导航条按钮点击navigatePress = () =&gt; &#123; this.props.navigation.navigate(&apos;OneDetailsFlatDetails&apos;,&#123; // 跳转的时候携带一个参数去下个页面 callback: (data)=&gt;&#123; alert(data) &#125; &#125;);&#125; B -&gt; A1234popTwo =() =&gt;&#123; this.props.navigation.state.params.callback(&apos;回调参数&apos;); this.props.navigation.goBack() &#125; 回到首页 this.props.navigation.popToTop()回到相应页 this.props.navigation.pop(2)效果图: 源码","categories":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/categories/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://pheromone.github.io/tags/React-Native/"}]}]}
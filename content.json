{"meta":{"title":"少停","subtitle":null,"description":"愿天堂没有bug","author":null,"url":"https://pheromone.github.io"},"pages":[{"title":"categories","date":"2018-05-16T05:42:13.079Z","updated":"2018-03-18T03:30:29.519Z","comments":true,"path":"categories/index.html","permalink":"https://pheromone.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-07-09T05:40:13.785Z","updated":"2018-07-09T05:39:44.230Z","comments":true,"path":"about/index.html","permalink":"https://pheromone.github.io/about/index.html","excerpt":"","text":""},{"title":"留言板","date":"2018-07-09T05:40:53.460Z","updated":"2018-07-09T05:40:53.460Z","comments":true,"path":"message/index.html","permalink":"https://pheromone.github.io/message/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-15T18:39:35.260Z","updated":"2018-03-18T03:30:47.370Z","comments":true,"path":"tags/index.html","permalink":"https://pheromone.github.io/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2018-04-07T08:31:05.000Z","updated":"2018-04-07T08:31:05.277Z","comments":true,"path":"search/index.html","permalink":"https://pheromone.github.io/search/index.html","excerpt":"","text":""}],"posts":[{"title":"React Native 推送通知至RN且显示推送内容","slug":"移动端学习/React Native 推送通知至RN且显示推送内容","date":"2018-09-07T16:00:00.000Z","updated":"2018-09-18T11:49:54.432Z","comments":true,"path":"2018/09/08/移动端学习/React Native 推送通知至RN且显示推送内容/","link":"","permalink":"https://pheromone.github.io/2018/09/08/移动端学习/React Native 推送通知至RN且显示推送内容/","excerpt":"APP推送是基本的要求,今天记录一下,大致是iOS原生收到推送后直接发通知给RN,RN这边监听着iOS原生的这个通知,以此获取到推送的消息.","text":"APP推送是基本的要求,今天记录一下,大致是iOS原生收到推送后直接发通知给RN,RN这边监听着iOS原生的这个通知,以此获取到推送的消息.效果图: 实现思路 ==&gt;这次采用的友盟推送,至于采用什么推送都是一样的.准备工作:iOS 集成推送,编写中间类,用于传值给RN. RN 界面实现监听iOS原生的通知,通过以上获取到推送的内容. iOS原生准备集成推送: …iOS写一个中间类传输通知给RN:CheckInvoice.h 1234567891011121314151617//// CheckInvoice.h// aitepiao//// Created by tc on 2018/8/28.// Copyright © 2018年 Facebook. All rights reserved.//#import &lt;Foundation/Foundation.h&gt;#import &lt;React/RCTBridgeModule.h&gt;#import &lt;React/RCTEventEmitter.h&gt;@interface CheckInvoice : RCTEventEmitter&lt;RCTBridgeModule&gt;@end CheckInvoice.m 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//// CheckInvoice.m// aitepiao//// Created by tc on 2018/8/28.// Copyright © 2018年 Facebook. All rights reserved.//#import &quot;CheckInvoice.h&quot;#import &lt;React/RCTEventDispatcher.h&gt;#import &lt;React/RCTBridge.h&gt;static CheckInvoice *_manager = nil;@implementation CheckInvoiceRCT_EXPORT_MODULE()-(instancetype)init&#123; if (self = [super init]) &#123; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(messageDidReceived:) name:@&quot;didReceiveNotification&quot; object:nil]; &#125; return self;&#125;- (NSArray&lt;NSString *&gt; *)supportedEvents&#123; return @[@&quot;didReceiveNotification&quot;, ];//有几个就写几个&#125;-(void)messageDidReceived:(NSNotification *)notification&#123; NSDictionary *body = notification.object; [self sendEventWithName:@&quot;didReceiveNotification&quot; body:body];&#125;+ (BOOL)requiresMainQueueSetup &#123; return YES;&#125;- (dispatch_queue_t)methodQueue&#123; return dispatch_get_main_queue();&#125;@end ok.传输类写完.然后在AppDelegate里面直接通过通知传即可:如: 12345678910111213141516171819202122232425262728293031323334353637383940// iOS 10以上-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123; NSDictionary * userInfo = notification.request.content.userInfo; NSLog(@&quot;iOS 10以上%@&quot;,userInfo); if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123; //应用处于前台时的远程推送接受 //关闭U-Push自带的弹出框 [UMessage setAutoAlert:NO]; //必须加这句代码 [UMessage didReceiveRemoteNotification:userInfo]; &#125;else&#123; //应用处于前台时的本地推送接受 &#125; //当应用处于前台时提示设置，需要哪个可以设置哪一个 if (@available(iOS 10.0, *)) &#123; completionHandler(UNNotificationPresentationOptionSound|UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionAlert); &#125; else &#123; // Fallback on earlier versions &#125; [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;// 收到通知-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler&#123; NSDictionary * userInfo = response.notification.request.content.userInfo; NSLog(@&quot;iOS外部 %@&quot;,userInfo); [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123; NSLog(@&quot;iOS 10以下%@&quot;,userInfo); [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;- (void)application:(UIApplication *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123; NSLog(@&quot;deviceToken==%@&quot;,[[[[deviceToken description] stringByReplacingOccurrencesOfString: @&quot;&lt;&quot; withString: @&quot;&quot;] stringByReplacingOccurrencesOfString: @&quot;&gt;&quot; withString: @&quot;&quot;] stringByReplacingOccurrencesOfString: @&quot; &quot; withString: @&quot;&quot;]); [UMessage registerDeviceToken:deviceToken];&#125; ok,iOS原生这边基本完成.剩下RN这边:引入NativeModules和NativeEventEmitter组件引入原生中间类 12const &#123; CheckInvoice &#125; = NativeModules;const checkInvoiceEmitter = new NativeEventEmitter(CheckInvoice); 然后直接在生命周期方法里面监听iOS通知即可. 1234567891011componentDidMount() &#123; // 监听iOS原生 UM push 监听外部通知 checkInvoiceEmitter.addListener( &apos;didReceiveNotification&apos;, (info) =&gt; &#123; alert(info.aps.alert.body) this.setState(&#123; info:info.aps.alert.body &#125;) &#125; )&#125; 源码:只有iOS推送 Android也如此,集成推送.书写中间类传通知给RN. 这里就贴一下桥接代码了: CommModule.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.eazytec.zqtong.gov.baseapp.RN;import android.content.Intent;import android.net.Uri;import android.util.Log;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.modules.core.DeviceEventManagerModule;/** * 通信Module类 * Created by Song on 2017/2/17. */public class CommModule extends ReactContextBaseJavaModule &#123; private ReactApplicationContext mContext; public static final String MODULE_NAME = &quot;commModule&quot;; public static final String EVENT_NAME = &quot;EventName&quot;; /** * 构造方法必须实现 * @param reactContext */ public CommModule(ReactApplicationContext reactContext) &#123; super(reactContext); this.mContext = reactContext; &#125; /** * 在rn代码里面是需要这个名字来调用该类的方法 * @return */ @Override public String getName() &#123; return MODULE_NAME; &#125; /** * Native调用RN * @param msg */ public void nativeCallRn(String msg) &#123; mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(EVENT_NAME,msg); &#125;&#125; CommPackage.java 1234567891011121314151617181920212223242526272829303132333435363738394041package com.eazytec.zqtong.gov.baseapp.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * 通信Module类 * Created by Song on 2017/2/17. */public class CommPackage implements ReactPackage &#123; private static final CommPackage mCommPackage = new CommPackage(); public CommModule mModule; /** * 创建Native Module * @param reactContext * @return */ @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); mModule = new CommModule(reactContext); modules.add(mModule); return modules; &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; return Collections.emptyList(); &#125;&#125; ok.上面就是桥接文件.然后只需要在返回通知类中发送通知给RN即可.如: MainActivity.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185package com.eazytec.zqtong.gov.baseapp;import android.app.Application;import android.widget.Toast;import org.json.JSONObject;import com.eazytec.zqtong.gov.baseapp.RN.CommModule;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.google.gson.Gson;import android.content.Context;import android.util.Log;import com.eazytec.zqtong.gov.baseapp.BuildConfig;import com.learnium.RNDeviceInfo.RNDeviceInfo;import com.facebook.react.ReactApplication;import cn.reactnative.httpcache.HttpCachePackage;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import com.react.rnspinkit.RNSpinkitPackage;import java.util.Arrays;import java.util.List;import com.imagepicker.ImagePickerPackage;import com.umeng.message.PushAgent;import com.umeng.commonsdk.UMConfigure;import com.umeng.message.IUmengRegisterCallback;import com.umeng.message.MsgConstant;import com.umeng.message.PushAgent;import com.umeng.message.UTrack;import com.umeng.message.UmengMessageHandler;import com.umeng.message.UmengNotificationClickHandler;import com.umeng.message.entity.UMessage;import com.facebook.react.bridge.ReactApplicationContext;import android.provider.Settings;import android.support.annotation.Nullable;import com.facebook.react.bridge.Arguments;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.WritableMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import com.eazytec.zqtong.gov.baseapp.RN.CommPackage;import java.util.List;import android.app.Activity;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.content.Context;public class MainApplication extends Application implements ReactApplication &#123; //定义上下文对象 public static ReactContext myContext; private static final CommPackage mCommPackage = new CommPackage(); private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; private ReactApplicationContext mContext; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new HttpCachePackage(), new RNSpinkitPackage(), new RNDeviceInfo(), new ImagePickerPackage(), mCommPackage ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; //定义发送事件的函数 public void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; System.out.println(&quot;reactContext=&quot;+reactContext); reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName,params); &#125; @Override public void onCreate() &#123; super.onCreate(); UMConfigure.setLogEnabled(true); SoLoader.init(this, /* native exopackage */ false); //友盟 push PushAgent mPushAgent = PushAgent.getInstance(this); UmengMessageHandler messageHandler = new UmengMessageHandler() &#123; /** * 通知的回调方法（通知送达时会回调） */ @Override public void dealWithNotificationMessage(Context context, UMessage msg) &#123; //调用super，会展示通知，不调用super，则不展示通知。 super.dealWithNotificationMessage(context, msg); Gson gson = new Gson(); // 推送的内容 Log.i(&quot;msg来了内容&quot;, msg.text); Log.i(&quot;msg来了头&quot;, msg.title); String jsonStr = gson.toJson(msg); Log.i(&quot;完整输出&quot;, jsonStr); mCommPackage.mModule.nativeCallRn(jsonStr); &#125; &#125;; mPushAgent.setMessageHandler(messageHandler); //注册推送服务，每次调用register方法都会回调该接口 mPushAgent.register(new IUmengRegisterCallback() &#123; @Override public void onSuccess(String deviceToken) &#123; //注册成功会返回device token Log.i(deviceToken,&quot;deviceToken来了&quot;); Log.i(deviceToken,deviceToken); &#125; @Override public void onFailure(String s, String s1) &#123; Log.i(s,s); Log.i(s1,s1); &#125; /** * 程序是否在前台运行 * * @return */ public boolean isAppOnForeground() &#123; // Returns a list of application processes that are running on the // device ActivityManager activityManager = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE); String packageName = getApplicationContext().getPackageName(); List&lt;RunningAppProcessInfo&gt; appProcesses = activityManager .getRunningAppProcesses(); if (appProcesses == null) return false; for (RunningAppProcessInfo appProcess : appProcesses) &#123; // The name of the process that this object is associated with. if (appProcess.processName.equals(packageName) &amp;&amp; appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &#123; return true; &#125; &#125; return false; &#125; &#125;); &#125;&#125;","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"React Native类似支付宝的应用增删模块的简单实现","slug":"移动端学习/React Native类似支付宝的应用增删模块的简单实现","date":"2018-08-16T16:00:00.000Z","updated":"2018-08-17T09:36:37.119Z","comments":true,"path":"2018/08/17/移动端学习/React Native类似支付宝的应用增删模块的简单实现/","link":"","permalink":"https://pheromone.github.io/2018/08/17/移动端学习/React Native类似支付宝的应用增删模块的简单实现/","excerpt":"项目中,涉及到类似支付宝的应用增删模块,这几天简单的实现了下.基本雏形实现了.后面的细节稍后再做处理.写篇博客记录下.","text":"项目中,涉及到类似支付宝的应用增删模块,这几天简单的实现了下.基本雏形实现了.后面的细节稍后再做处理.写篇博客记录下.效果图: 实现思路 ==&gt;UI: 一开始采用外部ScrollView内部FlatList和ScrollView实现,后来发现有点臃肿,于是采用外部FlatList,内部ScrollView实现.然后发现其实代码差不太多…….浪费表情,其中依赖几个三方库:react-native-scrollable-tab-view,react-native-underline-tabbar.本来想使用SectionList实现的,但是感觉使用SectionList会更麻烦.逻辑: 通过数据中 id 和 tag实现 废话不多缩,首先,新建一个项目,添加相应库:第一种实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576/** * UI 通过 外部ScrollView 内部 FlatList或者 ScrollView 实现 (使用三方库react-native-scrollable-tab-view&amp;&amp;react-native-underline-tabbar) * 逻辑 通过 数据中 id 和 tag实现 * */import React, &#123; Component &#125; from &apos;react&apos;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking, ScrollView&#125; from &apos;react-native&apos;const &#123; width &#125; = Dimensions.get(&apos;window&apos;)import ScrollableTabView from &apos;react-native-scrollable-tab-view&apos;import TabBar from &apos;react-native-underline-tabbar&apos;export default class One extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; startEdit: false, // 是否点击了编辑 默认未点击false myApplyData: [], otherApplyData: [], applyData: [ &#123; title: &apos;我的应用&apos;, sub: [ &#123; id: &apos;10086&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&apos;, name: &apos;价费通10086&apos;, &#125;, &#123; id: &apos;10010&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;展示中心10010&apos;, &#125; ], &#125;, &#123; title: &apos;政务服务&apos;, sub: [ &#123; subTitle: &apos;政企&apos;, sub: [ &#123; id: &apos;10086&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&apos;, name: &apos;价费通10086&apos;, tag: true, &#125;, &#123; id: &apos;10010&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;展示中心10010&apos;, tag: true, &#125;, &#123; id: &apos;9&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;办事平台&apos;, tag: false, &#125;, &#123; id: &apos;10&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;少儿图书馆&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;第三方服务&apos;, sub: [ &#123; id: &apos;11&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;12&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;13&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;14&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;15&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;16&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;17&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;18&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, ], &#125;, &#123; title: &apos;政企应用&apos;, sub: [ &#123; subTitle: &apos;按主题&apos;, sub: [ &#123; id: &apos;19&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;20&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;按部门&apos;, sub: [ &#123; id: &apos;21&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;按证件&apos;, sub: [ &#123; id: &apos;22&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;主体周期&apos;, sub: [ &#123; id: &apos;23&apos;, icon: &apos;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;24&apos;, icon: &apos;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, ], &#125;, ], &#125; &#125; componentDidMount() &#123; var data = this.state.applyData //赋值 我的应用数据 this.setState(&#123; myApplyData: data[0].sub, &#125;) //赋值 其他应用数据 this.setState(&#123; otherApplyData: data.slice(1), &#125;) &#125; /** * 点击编辑 * */ editAction = () =&gt; &#123; this.setState(&#123; startEdit:!this.state.startEdit &#125;) &#125; /** * 去除我的应用 * */ subAction = item =&gt; &#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.item.id // 选中的id //修改我的应用数据源 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) //修改其他应用数据源 otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 点击其他应用 * */ otherAction =(item) =&gt;&#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id //id console.log(item) //根据数据中tag值判断 if(item.tag == true)&#123; //在我的应用当中,需要去除 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) &#125;else &#123; //不在我的应用当中,需要添加 data.push(item) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = true &#125; &#125;) &#125;) &#125;) &#125; // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 去详情页面 * */ goDetailsAction = item =&gt; &#123; alert(&apos;去详情&apos;) &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*我的应用条-编辑*/&#125; &lt;MyApplyEdit applyEditData=&#123;this.state.myApplyData&#125; editAction=&#123;() =&gt; &#123; this.editAction() &#125;&#125; /&gt; &lt;ScrollView&gt; &#123;/*我的应用*/&#125; &lt;View style=&#123;&#123; marginTop: 10, backgroundColor: &apos;#ffffff&apos; &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, alignItems: &apos;center&apos;, marginTop: 10, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &apos;blue&apos;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &apos;700&apos; &#125;&#125;&gt; 我的应用 &lt;/Text&gt; &lt;/View&gt; &lt;FlatList data=&#123;this.state.myApplyData&#125; style=&#123;&#123; marginBottom: 20 &#125;&#125; renderItem=&#123;item =&gt; this.renderMyApplyRow(item)&#125; keyExtractor=&#123;this.keyMyApplyExtractor&#125; numColumns=&#123;4&#125; /&gt; &lt;/View&gt; &#123;/*其他应用*/&#125; &#123;this.state.otherApplyData.map((item, index) =&gt; ( &lt;View key=&#123;index&#125;&gt; &#123;/*标题*/&#125; &lt;View style=&#123;&#123; paddingTop: 10, alignItems: &apos;center&apos;, backgroundColor: &apos;white&apos;, flexDirection: &apos;row&apos;, alignItems: &apos;center&apos;, marginTop: 10, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &apos;blue&apos;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &apos;700&apos; &#125;&#125;&gt; &#123;item.title&#125; &lt;/Text&gt; &lt;/View&gt; &#123;/*主体内容*/&#125; &lt;ScrollableTabView style=&#123;&#123; backgroundColor: &apos;white&apos; &#125;&#125; tabBarActiveTextColor=&quot;#118EE9&quot; renderTabBar=&#123;() =&gt; &lt;TabBar underlineColor=&quot;#118EE9&quot; /&gt;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;View key=&#123;index&#125; tabLabel=&#123;&#123; label: item.subTitle &#125;&#125;&gt; &lt;ScrollView&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, height: 250, flexWrap: &apos;wrap&apos;, &#125;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125; &gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &apos;center&apos;, marginTop: 15, marginBottom: 10, &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &apos;absolute&apos;, top: -10, right: 10, &#125;&#125; onPress=&#123;() =&gt; this.otherAction(item)&#125; &gt; &lt;Image source=&#123; item.tag ? require(&apos;./image/sub.png&apos;) : require(&apos;./image/add.png&apos;) &#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ))&#125; &lt;/View&gt; &lt;/ScrollView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollableTabView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollView&gt; &lt;/View&gt; ) &#125; //-------------------------------我的应用start -------------------------------- /** * 我的应用render * */ renderMyApplyRow = item =&gt; ( &lt;TouchableOpacity onPress=&#123;() =&gt; this.goDetailsAction(item)&#125;&gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &apos;center&apos;, marginTop: 15, marginBottom: 10 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &apos;absolute&apos;, top: -10, right: 10 &#125;&#125; onPress=&#123;() =&gt; this.subAction(item)&#125; &gt; &lt;Image source=&#123;require(&apos;./image/sub.png&apos;)&#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) // 使用json中的key动态绑定key keyMyApplyExtractor = item =&gt; item.id //-------------------------------我的应用end --------------------------------&#125;// 上方的编辑 我的应用框 UIclass MyApplyEdit extends React.Component &#123; render() &#123; const &#123; applyEditData &#125; = this.props return ( &lt;View style=&#123;&#123; paddingTop: 5, paddingBottom: 5, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, backgroundColor: &apos;#ffffff&apos;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &apos;700&apos; &#125;&#125;&gt;我的应用&lt;/Text&gt; &lt;ScrollView showsHorizontalScrollIndicator=&#123;false&#125; showsVerticalScrollIndicator=&#123;false&#125; horizontal=&#123;true&#125; style=&#123;&#123; marginRight: 15 &#125;&#125; &gt; &#123;applyEditData.map((item, index) =&gt; ( &lt;Image key=&#123;index&#125; style=&#123;&#123; width: 30, height: 30, marginLeft: 10 &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; ))&#125; &lt;/ScrollView&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.props.editAction()&#125;&gt; &lt;View style=&#123;&#123; borderRadius: 4, marginRight: 10, paddingTop: 5, paddingBottom: 5, paddingLeft: 10, paddingRight: 10, borderWidth: 1, borderColor: &apos;blue&apos;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; color: &apos;blue&apos; &#125;&#125;&gt;编辑&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 第二种实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569/** * UI 通过 外部FlatList 内部 ScrollView + view 实现 (使用三方库react-native-scrollable-tab-view&amp;&amp;react-native-underline-tabbar) * 逻辑 通过 数据中 id 和 tag实现 * */import React, &#123; Component &#125; from &apos;react&apos;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking, ScrollView&#125; from &apos;react-native&apos;const &#123; width &#125; = Dimensions.get(&apos;window&apos;)import ScrollableTabView from &apos;react-native-scrollable-tab-view&apos;import TabBar from &apos;react-native-underline-tabbar&apos;export default class Two extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; startEdit: false, // 是否点击了编辑 默认未点击false myApplyData: [], otherApplyData: [], applyData: [ &#123; title: &apos;我的应用&apos;, sub: [ &#123; id: &apos;10086&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&apos;, name: &apos;价费通10086&apos;, &#125;, &#123; id: &apos;10010&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;展示中心10010&apos;, &#125; ], &#125;, &#123; title: &apos;政务服务&apos;, sub: [ &#123; subTitle: &apos;政企&apos;, sub: [ &#123; id: &apos;10086&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&apos;, name: &apos;价费通10086&apos;, tag: true, &#125;, &#123; id: &apos;10010&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;展示中心10010&apos;, tag: true, &#125;, &#123; id: &apos;9&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;办事平台&apos;, tag: false, &#125;, &#123; id: &apos;10&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;少儿图书馆&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;第三方服务&apos;, sub: [ &#123; id: &apos;11&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;12&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;13&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;14&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;15&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;16&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;17&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;18&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, ], &#125;, &#123; title: &apos;政企应用&apos;, sub: [ &#123; subTitle: &apos;按主题&apos;, sub: [ &#123; id: &apos;19&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;20&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;按部门&apos;, sub: [ &#123; id: &apos;21&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;按证件&apos;, sub: [ &#123; id: &apos;22&apos;, icon: &apos;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, &#123; subTitle: &apos;主体周期&apos;, sub: [ &#123; id: &apos;23&apos;, icon: &apos;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, &#123; id: &apos;24&apos;, icon: &apos;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&apos;, name: &apos;价费通&apos;, tag: false, &#125;, ], &#125;, ], &#125;, ], &#125; &#125; componentDidMount() &#123; var data = this.state.applyData //赋值 我的应用数据 this.setState(&#123; myApplyData: data[0].sub, &#125;) //赋值 其他应用数据 this.setState(&#123; otherApplyData: data.slice(1), &#125;) &#125; render() &#123; return ( &lt;View&gt; &#123;/*我的应用条-编辑*/&#125; &lt;MyApplyEdit applyEditData=&#123;this.state.myApplyData&#125; editAction=&#123;() =&gt; &#123; this.editAction() &#125;&#125; /&gt; &#123;/*应用列表*/&#125; &lt;FlatList data=&#123;this.state.otherApplyData&#125; style=&#123;&#123; marginBottom: 20 &#125;&#125; ListHeaderComponent=&#123;this.ListHeaderComponent&#125; renderItem=&#123;item =&gt; this.renderItem(item)&#125; keyExtractor=&#123;this.keyExtractor&#125; /&gt; &lt;/View&gt; ) &#125; /** * 去详情 * */ goDetailsAction =(item) =&gt;&#123; alert(&apos;去详情&apos;) &#125; /** * 去除我的应用 * */ subAction = item =&gt; &#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id // 选中的id //修改我的应用数据源 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) //修改其他应用数据源 otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 点击其他应用 * */ otherAction =(item) =&gt;&#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id //id console.log(item) //根据数据中tag值判断 if(item.tag == true)&#123; //在我的应用当中,需要去除 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) &#125;else &#123; //不在我的应用当中,需要添加 data.push(item) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = true &#125; &#125;) &#125;) &#125;) &#125; // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; ListHeaderComponent =()=&gt;&#123; var data = this.state.myApplyData return( &lt;View style=&#123;&#123;marginTop:10&#125;&#125;&gt; &lt;HeaderView title=&apos;我的应用&apos;/&gt; &lt;View style=&#123;&#123;flexDirection:&apos;row&apos;,backgroundColor:&apos;#ffffff&apos;&#125;&#125;&gt; &#123; data.map((item,index) =&gt;( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125;&gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &apos;center&apos;, marginTop: 15, marginBottom: 10 &#125;&#125;&gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &apos;absolute&apos;, top: -10, right: 10 &#125;&#125; onPress=&#123;() =&gt; this.subAction(item)&#125; &gt; &lt;Image source=&#123;require(&apos;./image/sub.png&apos;)&#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; )) &#125; &lt;/View&gt; &lt;/View&gt; ) &#125; renderItem =(item)=&gt;&#123; console.log(item) return( &lt;View style=&#123;&#123;marginTop:10&#125;&#125;&gt; &lt;HeaderView title=&#123;item.item.title&#125;/&gt; &lt;ScrollableTabView style=&#123;&#123; backgroundColor: &apos;white&apos; &#125;&#125; tabBarActiveTextColor=&quot;#118EE9&quot; renderTabBar=&#123;() =&gt; &lt;TabBar underlineColor=&quot;#118EE9&quot; /&gt;&#125; &gt; &#123;item.item.sub.map((item, index) =&gt; ( &lt;View key=&#123;index&#125; tabLabel=&#123;&#123; label: item.subTitle &#125;&#125;&gt; &lt;ScrollView&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, height: 250, flexWrap: &apos;wrap&apos;, &#125;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125; &gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &apos;center&apos;, marginTop: 15, marginBottom: 10, &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &apos;absolute&apos;, top: -10, right: 10, &#125;&#125; onPress=&#123;() =&gt; this.otherAction(item)&#125; &gt; &lt;Image source=&#123; item.tag ? require(&apos;./image/sub.png&apos;) : require(&apos;./image/add.png&apos;) &#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ))&#125; &lt;/View&gt; &lt;/ScrollView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollableTabView&gt; &lt;/View&gt; ) &#125; keyExtractor = item =&gt; item.title /** * 点击编辑 * */ editAction = () =&gt; &#123; this.setState(&#123; startEdit:!this.state.startEdit &#125;) &#125;&#125;// 上方的编辑 我的应用框 UIclass MyApplyEdit extends React.Component &#123; render() &#123; const &#123; applyEditData &#125; = this.props return ( &lt;View style=&#123;&#123; paddingTop: 5, paddingBottom: 5, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, backgroundColor: &apos;#ffffff&apos;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &apos;700&apos; &#125;&#125;&gt;我的应用&lt;/Text&gt; &lt;ScrollView showsHorizontalScrollIndicator=&#123;false&#125; showsVerticalScrollIndicator=&#123;false&#125; horizontal=&#123;true&#125; style=&#123;&#123; marginRight: 15 &#125;&#125; &gt; &#123;applyEditData.map((item, index) =&gt; ( &lt;Image key=&#123;index&#125; style=&#123;&#123; width: 30, height: 30, marginLeft: 10 &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; ))&#125; &lt;/ScrollView&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.props.editAction()&#125;&gt; &lt;View style=&#123;&#123; borderRadius: 4, marginRight: 10, paddingTop: 5, paddingBottom: 5, paddingLeft: 10, paddingRight: 10, borderWidth: 1, borderColor: &apos;blue&apos;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; color: &apos;blue&apos; &#125;&#125;&gt;编辑&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ) &#125;&#125;// 头视图class HeaderView extends React.Component &#123; render() &#123; const &#123; title &#125; = this.props return ( &lt;View style=&#123;&#123; backgroundColor:&apos;#ffffff&apos;, flexDirection: &apos;row&apos;, alignItems: &apos;center&apos;, paddingTop:10 &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &apos;blue&apos;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &apos;700&apos; &#125;&#125;&gt; &#123;title&#125; &lt;/Text&gt; &lt;/View&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 以后就是两种实现,基本的功能实现了,至于细节优化点等日后慢慢再做吧.源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"React Native \"收起-展开\"功能实现","slug":"移动端学习/React Native <收起-展开>功能实现","date":"2018-08-10T16:00:00.000Z","updated":"2018-08-12T01:19:21.244Z","comments":true,"path":"2018/08/11/移动端学习/React Native <收起-展开>功能实现/","link":"","permalink":"https://pheromone.github.io/2018/08/11/移动端学习/React Native <收起-展开>功能实现/","excerpt":"近来公司的项目里面涉及到一个类似”收起-展开”的UI功能模块,先是在网上猥琐一番之后,并未发现什么.无奈之下,只能自己手撸一个了.","text":"近来公司的项目里面涉及到一个类似”收起-展开”的UI功能模块,先是在网上猥琐一番之后,并未发现什么.无奈之下,只能自己手撸一个了.一开始做了个”互斥收起-展开”,公司可能不太满意,让我抄另外一个APP”非互斥收起-展开”,哎…先上图:非互斥缩一缩 互斥缩一缩 实现原理很简单:非互斥缩一缩: 先在json数据里面定义type标示,标示一级展开|收起状态,在UI里面就根据这个标示判断是收起还是展开,而二级收起|展开需要为每组数据定义一个唯一标示.互斥缩一缩:先定义一个state,根据该state来显示收起UI还是展开,因为state只有一个,也就形成了只有一组是展开.同时,在判断二次展开|收起这里也需要在json里面定义一个唯一标示.这些数据标示可以事先和后端人员商量好,让后端人员帮你弄好,也可以自己拿到数据之后再插入.废话不多少,戴起磨砂手套开始撸!!!直接上源码:非互斥缩一缩123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302/* eslint-disable */import React, &#123; Component &#125; from &apos;react&apos;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking,&#125; from &apos;react-native&apos;const &#123; width &#125; = Dimensions.get(&apos;window&apos;)export default class One extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.row = null this.state = &#123; governmentData: [ &#123; id: &apos;0&apos;, name: &apos;社会保障局&apos;, type: false, childs: [ &#123; index: &apos;00&apos;, name: &apos;资料教室&apos;, type: false, tel: &apos;5233&apos;, message: &apos;查询资料,注销档案&apos;, &#125;, &#123; name: &apos;后勤部&apos;, type: false, index: &apos;01&apos;, tel: &apos;1645682&apos;, message: &apos;不对外服务&apos;, &#125;, ], &#125;, &#123; id: &apos;1&apos;, name: &apos;卫生局&apos;, type: false, childs: [ &#123; name: &apos;妇产科&apos;, type: false, index: &apos;10&apos;, tel: &apos;112转678&apos;, message: &apos;接待孕妇,待产孕妇,军嫂预先&apos;, &#125;, &#123; name: &apos;儿科&apos;, type: false, index: &apos;11&apos;, tel: &apos;112转008&apos;, message: &apos;小于12周岁儿童就医&apos;, &#125;, &#123; name: &apos;失恋科&apos;, type: false, index: &apos;12&apos;, tel: &apos;112转出去&apos;, message: &apos;回家玩蛋去!!!&apos;, &#125;, ], &#125;, &#123; id: &apos;2&apos;, name: &apos;神盾局&apos;, type: false, childs: [ &#123; name: &apos;城管大队&apos;, type: false, index: &apos;20&apos;, tel: &apos;110&apos;, title: &apos;打打打&apos;, message: &apos;镇压起义&apos;, &#125;, ], &#125;, ], isRefresh: true, index: -1, //默认展开负一行 indexIndex: -1, &#125; &#125; componentDidMount() &#123; this.flatlist = null this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 下拉刷新 * */ onRefresh = () =&gt; &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 点击一级 * */ itemOnclick = item =&gt; &#123; var data = this.state.governmentData data.map((itemm, i) =&gt; &#123; if (i == item.index) &#123; itemm.type = !itemm.type &#125; &#125;) this.setState(&#123; governmentData: data, &#125;) &#125; /** * 点击二级 * */ itemitemOnclick = e =&gt; &#123; var data = this.state.governmentData data.map((item, index) =&gt; &#123; item.childs.map((item, index) =&gt; &#123; if (item.index == e.index) &#123; item.type = !item.type &#125; &#125;) &#125;) this.setState(&#123; governmentData: data, &#125;) &#125; /** * 打电话 * */ tellPhone = item =&gt; &#123; Linking.openURL(`tel:$&#123;item.tel&#125;`) &#125; /** * FlatList render * */ renderRow = item =&gt; ( &lt;View ref=&#123;item.index&#125;&gt; &lt;View&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.itemOnclick(item)&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, backgroundColor: &apos;white&apos;, height: 30, alignItems: &apos;center&apos;, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 5, width: 4, height: 10, paddingTop: 7, paddingBottom: 7, backgroundColor:&apos;red&apos; &#125;&#125; /&gt; &lt;Text style=&#123;&#123; color: &apos;#333333&apos;, marginLeft: 5, fontSize: 16 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &#123;/* 右边箭头 */&#125; &lt;Image source=&#123; item.item.type ? require(&apos;./image/btnDown.png&apos;) : require(&apos;./image/right.png&apos;) &#125; style=&#123;&#123; position: &apos;absolute&apos;, right: 15, width: 15, height: 15 &#125;&#125; /&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.item.type ? item.item.childs.map((item, index) =&gt; ( &lt;View style=&#123;&#123; backgroundColor: &apos;white&apos; &#125;&#125; key=&#123;index&#125;&gt; &lt;View style=&#123;&#123; marginLeft: 7, marginTop: 10 &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos; &#125;&#125;&gt; &lt;Image source=&#123; item.type ? require(&apos;./image/btnDownB.png&apos;) : require(&apos;./image/btnRightB.png&apos;) &#125; style=&#123;&#123; width: 10, height: 10 &#125;&#125; /&gt; &lt;Text onPress=&#123;() =&gt; this.itemitemOnclick(item)&#125; style=&#123;&#123; marginLeft: 7 &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, marginTop: 10, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.type ? ( &lt;View&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, &#125;&#125; &gt; &lt;TouchableOpacity style=&#123;&#123; flexDirection: &apos;row&apos; &#125;&#125; onPress=&#123;() =&gt; this.tellPhone(item)&#125; &gt; &lt;Image source=&#123;require(&apos;./image/phone.png&apos;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;电话 &#123;item.tel&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, &#125;&#125; &gt; &lt;Image source=&#123;require(&apos;./image/tlak.png&apos;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;留言 &#123;item.message&#125;&lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; ) : null&#125; &lt;/View&gt; )) : null&#125; &lt;/View&gt; ) render() &#123; return ( &lt;FlatList data=&#123;this.state.governmentData&#125; renderItem=&#123;this.renderRow&#125; onRefresh=&#123;() =&gt; this.onRefresh()&#125; refreshing=&#123;this.state.isRefresh&#125; /&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 互斥缩一缩123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275/* eslint-disable */import React, &#123; Component &#125; from &apos;react&apos;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking,&#125; from &apos;react-native&apos;const &#123; width &#125; = Dimensions.get(&apos;window&apos;)export default class Two extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; governmentData: [ &#123; name: &apos;社会保障局&apos;, childs: [ &#123; index:0, name: &apos;资料教室&apos;, tel: &apos;5233&apos;, message: &apos;查询资料,注销档案&apos;, &#125;, &#123; index:1, name: &apos;后勤部&apos;, tel: &apos;1645682&apos;, message: &apos;不对外服务&apos;, &#125;, ], &#125;, &#123; name: &apos;卫生局&apos;, childs: [ &#123; index:0, name: &apos;妇产科&apos;, tel: &apos;112转678&apos;, message: &apos;接待孕妇,待产孕妇,军嫂预先&apos;, &#125;, &#123; index:1, name: &apos;儿科&apos;, tel: &apos;112转008&apos;, message: &apos;小于12周岁儿童就医&apos;, &#125;, &#123; index:2, name: &apos;失恋科&apos;, tel: &apos;112转出去&apos;, message: &apos;回家玩蛋去!!!&apos;, &#125;, ], &#125;, &#123; name: &apos;神盾局&apos;, childs: [ &#123; index:0, name: &apos;城管大队&apos;, tel: &apos;110&apos;, title: &apos;打打打&apos;, message: &apos;镇压起义&apos;, &#125;, ], &#125;, ], isRefresh: true, index: -1, //默认展开负一行 indexIndex: -1, &#125; &#125; componentDidMount() &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 下拉刷新 * */ onRefresh = () =&gt; &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 点击一级 * */ itemOnclick = item =&gt; &#123; this.setState(&#123; index: item.index, indexIndex: -1 &#125;) &#125; /** * 点击二级 * */ itemitemOnclick = e =&gt; &#123; this.setState(&#123; indexIndex: e.index, &#125;) &#125; /** * 打电话 * */ tellPhone = item =&gt; &#123; Linking.openURL(`tel:$&#123;item.tel&#125;`) &#125; /** * FlatList render * */ renderRow = item =&gt; ( &lt;View ref=&#123;item.index&#125;&gt; &lt;View&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.itemOnclick(item)&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, backgroundColor: &apos;white&apos;, height: 30, alignItems: &apos;center&apos;, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 5, width: 4, height: 10, paddingTop: 7, paddingBottom: 7, backgroundColor:&apos;red&apos; &#125;&#125; /&gt; &lt;Text style=&#123;&#123; color: &apos;#333333&apos;, marginLeft: 5, fontSize: 16 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &#123;/* 右边箭头 */&#125; &lt;Image source=&#123; item.index == this.state.index ? require(&apos;./image/btnDown.png&apos;) : require(&apos;./image/right.png&apos;) &#125; style=&#123;&#123; position: &apos;absolute&apos;, right: 15, width: 15, height: 15 &#125;&#125; /&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.index == this.state.index ? item.item.childs.map((item, index) =&gt; ( &lt;View style=&#123;&#123; backgroundColor: &apos;white&apos; &#125;&#125; key=&#123;index&#125;&gt; &lt;View style=&#123;&#123; marginLeft: 7, marginTop: 10 &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &apos;row&apos; &#125;&#125;&gt; &lt;Image source=&#123; index == this.state.indexIndex ? require(&apos;./image/btnDownB.png&apos;) : require(&apos;./image/btnRightB.png&apos;) &#125; style=&#123;&#123; width: 10, height: 10 &#125;&#125; /&gt; &lt;Text onPress=&#123;() =&gt; this.itemitemOnclick(item)&#125; style=&#123;&#123; marginLeft: 7 &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, marginTop: 10, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.index == this.state.indexIndex ? ( &lt;View&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, &#125;&#125; &gt; &lt;TouchableOpacity style=&#123;&#123; flexDirection: &apos;row&apos; &#125;&#125; onPress=&#123;() =&gt; this.tellPhone(item)&#125; &gt; &lt;Image source=&#123;require(&apos;./image/phone.png&apos;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;电话 &#123;item.tel&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &apos;center&apos;, flexDirection: &apos;row&apos;, &#125;&#125; &gt; &lt;Image source=&#123;require(&apos;./image/tlak.png&apos;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;留言 &#123;item.message&#125;&lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &apos;rgb(228,228,228)&apos;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; ) : null&#125; &lt;/View&gt; )) : null&#125; &lt;/View&gt; ) render() &#123; return ( &lt;FlatList data=&#123;this.state.governmentData&#125; renderItem=&#123;this.renderRow&#125; onRefresh=&#123;() =&gt; this.onRefresh()&#125; refreshing=&#123;this.state.isRefresh&#125; /&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-navigation 和 dva的结合使用","slug":"移动端学习/react-navigation和dva的结合使用","date":"2018-07-28T16:00:00.000Z","updated":"2018-07-29T06:25:41.881Z","comments":true,"path":"2018/07/29/移动端学习/react-navigation和dva的结合使用/","link":"","permalink":"https://pheromone.github.io/2018/07/29/移动端学习/react-navigation和dva的结合使用/","excerpt":"今天,学习下RN中的另外一个全家桶套餐架构:dva+React-Navigation,本文基于react-native:0.55.4,dva-core:^1.3.0,react-navigation:^2.5.1,react-navigation-redux-helpers:^2.0.4,react-redux:0^5.0.7所撸.","text":"今天,学习下RN中的另外一个全家桶套餐架构:dva+React-Navigation,本文基于react-native:0.55.4,dva-core:^1.3.0,react-navigation:^2.5.1,react-navigation-redux-helpers:^2.0.4,react-redux:0^5.0.7所撸. react-native的官方dva-demodva官方github 废话不多缩,首先,新建一个项目,添加一堆相应库:npm install mobx dva-core --save 引入dvanpm install mobx react-navigation-redux-helpers --save 引入react-navigation-redux-helpersnpm install mobx react-redux --save 引入react-reduxnpm install babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev 能够使用@标签npm install react-navigation --save 引入导航库然后修改一下工程里面的.babelrc: 1234&#123; &quot;presets&quot;: [&quot;react-native&quot;], &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; OK,基本的架子已经搭好.然后新建一个src目录.这里存放基本代码和基本图片之类的. 然后,在入口文件index.js中,修改一下代码:12345678import &apos;./App&apos;;console.ignoredYellowBox = [ &apos;Warning: componentWillMount is deprecated&apos;, &apos;Warning: componentWillReceiveProps is deprecated&apos;, &apos;Warning: componentWillUpdate is deprecated&apos;, &apos;Warning: isMounted(...) is deprecated&apos;,] 在App.js中基础代码:1234567891011121314151617181920import React from &apos;react&apos;import &#123; AppRegistry &#125; from &apos;react-native&apos;import dva from &apos;./src/Utils/dva&apos;import Router, &#123; routerMiddleware, routerReducer &#125; from &apos;./router&apos;import appModel from &apos;./src/models/app&apos;const app = dva(&#123; initialState: &#123;&#125;, models: [appModel], extraReducers: &#123; router: routerReducer &#125;, onAction: [routerMiddleware], onError(e) &#123; console.log(&apos;onError&apos;, e) &#125;,&#125;)const App = app.start(&lt;Router /&gt;)AppRegistry.registerComponent(&apos;rn_dva&apos;, () =&gt; App) ok,如上图所示,dva的代码相比redux来说少了很多,不在需要大量的赋值粘贴,基本的逻辑代码均可以放在models中,其中的Utils只是dva的一个工具组,其中的代码并不多.一如既往,对着IDE就是一堆疯狂输出.完成的功能和之前的redux和Mobx一样.models下的app.js12345678910111213141516171819202122232425import &#123; createAction, NavigationActions &#125; from &apos;../Utils&apos;export default &#123; namespace: &apos;app&apos;, state: &#123; num: 0, mineType: &apos;红&apos;, &#125;, reducers: &#123; updateState(state, &#123; payload &#125;) &#123; return &#123; ...state, ...payload &#125; &#125;, &#125;, effects: &#123; *add(&#123; payload &#125;, &#123; call, put &#125;) &#123; yield put(createAction(&apos;updateState&apos;)(&#123; num:payload ,mineType:&apos;红&apos;&#125;)) &#125;, *sub(&#123; payload &#125;, &#123; call, put &#125;) &#123; yield put(createAction(&apos;updateState&apos;)(&#123; num:payload ,mineType:&apos;蓝&apos; &#125;)) &#125; &#125;, subscriptions: &#123; &#125;,&#125; Utils下的dva.js 123456789101112131415161718192021import React from &apos;react&apos;import &#123; create &#125; from &apos;dva-core&apos;import &#123; Provider, connect &#125; from &apos;react-redux&apos;export &#123; connect &#125;export default function(options) &#123; const app = create(options) // HMR workaround if (!global.registered) options.models.forEach(model =&gt; app.model(model)) global.registered = true app.start() // eslint-disable-next-line no-underscore-dangle const store = app._store app.start = container =&gt; () =&gt; &lt;Provider store=&#123;store&#125;&gt;&#123;container&#125;&lt;/Provider&gt; app.getStore = () =&gt; store return app&#125; Utils下的index.js 123export &#123; NavigationActions, StackActions &#125; from &apos;react-navigation&apos;export const createAction = type =&gt; payload =&gt; (&#123; type, payload &#125;) 剩下的就是两个UI界面了:One.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123; connect &#125; from &apos;react-redux&apos;import &#123; createAction, NavigationActions &#125; from &apos;../Utils&apos;import &#123;Images&#125; from &quot;../Image&quot;;const instructions = Platform.select(&#123; ios: &apos;Press Cmd+R to reload,\\n&apos; + &apos;Cmd+D or shake for dev menu&apos;, android: &apos;Double tap R on your keyboard to reload,\\n&apos; + &apos;Shake or press menu button for dev menu&apos;,&#125;);type Props = &#123;&#125;;@connect((&#123; app &#125;) =&gt; (&#123; ...app &#125;))export default class One extends Component&lt;Props&gt; &#123; static navigationOptions = &#123; tabBarLabel: &apos;苹果&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? Images.Tab.OneActive : Images.Tab.One&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ), &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.add()&#125;&gt; + 红 &lt;/Text&gt; &lt;Text&gt; One &#123;this.props.num&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.sub()&#125;&gt; - 蓝 &lt;/Text&gt; &lt;/View&gt; ); &#125; add =() =&gt;&#123; this.props.dispatch(createAction(&apos;app/add&apos;)(this.props.num + 1)) &#125; sub =() =&gt;&#123; this.props.dispatch(createAction(&apos;app/sub&apos;)(this.props.num - 1)) &#125; componentDidMount() &#123; console.log(this.props) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); Two.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123; connect &#125; from &apos;react-redux&apos;import &#123; createAction, NavigationActions &#125; from &apos;../Utils&apos;import &#123;Images&#125; from &quot;../Image&quot;;const instructions = Platform.select(&#123; ios: &apos;Press Cmd+R to reload,\\n&apos; + &apos;Cmd+D or shake for dev menu&apos;, android: &apos;Double tap R on your keyboard to reload,\\n&apos; + &apos;Shake or press menu button for dev menu&apos;,&#125;);type Props = &#123;&#125;;@connect((&#123; app &#125;) =&gt; (&#123; ...app &#125;))export default class Two extends Component&lt;Props&gt; &#123; static navigationOptions = &#123; tabBarLabel: &apos;安卓&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? Images.Tab.TwoActive : Images.Tab.Two&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ), &#125; render() &#123; return ( &lt;View style=&#123;[styles.container,&#123;backgroundColor:this.props.mineType == &apos;红&apos; ? &apos;red&apos; : &apos;blue&apos;&#125;]&#125;&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; TWO + &#123;this.props.mineType&#125; &lt;/Text&gt; &lt;/View&gt; ); &#125; componentDidMount() &#123; console.log(this.props.mineType) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); OK,以上就是全部代码.效果图: 源码地址 另外:redux+react-navigation另外:Mbox+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"React学习:简单个人消费记账系统","slug":"前端学习/React学习-简单个人消费记账系统","date":"2018-06-28T16:00:00.000Z","updated":"2018-06-29T06:12:15.511Z","comments":true,"path":"2018/06/29/前端学习/React学习-简单个人消费记账系统/","link":"","permalink":"https://pheromone.github.io/2018/06/29/前端学习/React学习-简单个人消费记账系统/","excerpt":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统.","text":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统.使用脚手架 create-react-app ,后台使用mockAPI模拟,网络请求使用axios,css效果使用bootstrap/4.0.0 .先来个效果图:其主要代码均在../src/components中,主文件是Records.js,具体的消费记录是Record.js,总消费记录是Box.js,消费记录的创建是RecordForm.js,下面是其源码:Records.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175import React, &#123; Component &#125; from &apos;react&apos;;import Record from &apos;./Record&apos;import RecordForm from &apos;./RecordForm&apos;import Box from &apos;./Box&apos;import axios from &apos;axios&apos;export default class Records extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; error:null, //网络错误信息 isLoader:true, //加载标示 records:[] //数据 &#125;; &#125; render() &#123; //根据 error isLoader 显示不同UI //如果error有值,显示errorUI //如果isLoader 为true,显示加载UI //如果isLoader 为false,显示正确数据UI const &#123;error,isLoader,records&#125; = this.state let renderRecords; if(error)&#123; renderRecords = &lt;div&gt;出错了:&#123;error&#125;&lt;/div&gt; &#125;else if(isLoader)&#123; renderRecords = &lt;div&gt;&lt;img src=&#123;require(&apos;./loading.gif&apos;)&#125; /&gt;&lt;/div&gt; &#125;else &#123; renderRecords = ( &lt;div&gt; &lt;table className=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;日期&lt;/th&gt; &lt;th&gt;标题&lt;/th&gt; &lt;th&gt;金额&lt;/th&gt; &lt;th&gt;事件&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;records.map((item,index)=&gt; &lt;Record key =&#123;item.id&#125; record=&#123;item&#125; updateData=&#123;this.updateRecord.bind(this)&#125; deleteData=&#123;this.deleteRecord.bind(this)&#125; /&gt; )&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; ); &#125; return( &lt;div&gt; &lt;h2&gt;消费记录&lt;/h2&gt; &lt;div className=&quot;row mb-3&quot;&gt; &lt;Box text=&quot;收入&quot; type=&quot;success&quot; amount=&#123;this.credits()&#125; /&gt; &lt;Box text=&quot;支出&quot; type=&quot;danger&quot; amount=&#123;this.debits()&#125; /&gt; &lt;Box text=&quot;余额&quot; type=&quot;info&quot; amount=&#123;this.balance()&#125; /&gt; &lt;/div&gt; &lt;RecordForm handleNewRecord = &#123;this.addRecord.bind(this)&#125; /&gt; &#123;renderRecords&#125; &lt;/div&gt; ) &#125; /** * 收入计算 * */ credits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &gt;= 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 支出计算 * */ debits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &lt; 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 余额计算 * */ balance() &#123; return this.credits() + this.debits(); &#125; /** * 更新账单 * */ updateRecord(record, data) &#123; const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.map( (item, index) =&gt; &#123; if(index !== recordIndex) &#123; // This isn&apos;t the item we care about - keep it as-is return item; &#125; // Otherwise, this is the one we want - return an updated value return &#123; ...item, ...data &#125;; &#125;); this.setState(&#123; records: newRecords &#125;); &#125; /** * 删除账单 * */ deleteRecord(record)&#123; // console.log(record) const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.filter( (item, index) =&gt; index !== recordIndex); this.setState(&#123; records: newRecords &#125;); &#125; /** * 把最新数据赋值state * */ addRecord (record) &#123; console.log(record) this.setState(&#123; error:null, isLoader:false, //加载标示 records:[ ...this.state.records, record ] &#125;) &#125; //请求数据 componentDidMount() &#123; var that = this axios.get(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&apos;) .then(response =&gt; that.setState(&#123; isLoader:false, records:response.data &#125;) ) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Record.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import React, &#123; Component &#125; from &apos;react&apos;;import moment from &quot;moment&quot;; //日期格式import axios from &apos;axios&apos;export default class Record extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; edit:false //编辑按钮状态 &#125;; &#125; render() &#123; //如果编辑状态为true,显示编辑状态,否则显示默认状态 if(this.state.edit)&#123; return this.renderEditRow() &#125;else &#123; return this.renderRow() &#125; &#125; renderEditRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&apos;YYYY-MM-DD&apos;); return ( &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;newDate&#125; ref=&quot;date&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.title&#125; ref=&quot;title&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.account&#125; ref=&quot;account&quot; /&gt;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleUpdate.bind(this)&#125;&gt;更新&lt;/button&gt; &lt;button className=&quot;btn btn-danger &quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;取消&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; renderRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&apos;YYYY-MM-DD&apos;); return ( &lt;tr&gt; &lt;td&gt;&#123;newDate&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.title&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.account&#125;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;编辑&lt;/button&gt; &lt;button className=&quot;btn btn-danger&quot; onClick=&#123;this.handleDelete.bind(this)&#125;&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; /** * 编辑按钮点击事件 * 对state edit做取反操作 * */ handleToggle () &#123; this.setState(&#123; edit:!this.state.edit &#125;) &#125; /** * 删除 按钮点击事件 * */ handleDelete (event) &#123; event.preventDefault() var that = this // alert(that.props.record.id) axios.delete(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&apos; + that.props.record.id) .then(response =&gt;&#123; console.log(response) this.props.deleteData(that.props.record) &#125;) .catch(err =&gt;&#123; &#125;) &#125; /** * 更新记录事件 * */ handleUpdate (event) &#123; event.preventDefault() // 方法阻止元素发生默认的行为 const record =&#123; date:this.refs.date.value, title:this.refs.title.value, account:this.refs.account.value &#125; var that = this // alert(that.props.record.id) axios.put(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&apos; + that.props.record.id,&#123; date:record.date, title:record.title, account:record.account &#125;) .then(response =&gt;&#123; this.props.updateData(this.props.record,response.data) this.setState(&#123; edit:false &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Box.js123456789101112131415161718192021/** * 上部的总消费记录 * */import React from &apos;react&apos;;const Box = (&#123; text, type, amount &#125;) =&gt; &#123; return ( &lt;div className=&quot;col&quot;&gt; &lt;div className=&quot;card&quot;&gt; &lt;div className=&#123;`card-header bg-$&#123;type&#125; text-white`&#125;&gt; &#123;text&#125; &lt;/div&gt; &lt;div className=&quot;card-body&quot;&gt; &#123;amount&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );&#125;export default Box RecordForm.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import React, &#123; Component &#125; from &apos;react&apos;;import axios from &apos;axios&apos;export default class RecordForm extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;; &#125; /** * 判断按钮是否可用 * */ valid()&#123; return this.state.date &amp;&amp; this.state.title &amp;&amp; this.state.account; &#125; /** * 输入改变触发 * */ handleChange (event)&#123; let name,obj; name = event.target.name; this.setState(( obj = &#123;&#125;, obj[&quot;&quot; + name] = event.target.value, obj )) &#125; /** * 提交按钮触发 * */ handleSubmit (event)&#123; event.preventDefault() var that = this axios.post(&apos;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&apos;,&#123; date:that.state.date, title:that.state.title, account:that.state.account &#125;) .then(response =&gt;&#123; console.log(response); this.props.handleNewRecord(response.data) that.setState(&#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125; render() &#123; return ( &lt;form className=&quot;form-inline mb-2&quot; onSubmit=&#123;this.handleSubmit.bind(this)&#125; &gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.date&#125; className=&quot;form-control&quot; placeholder=&quot;时间&quot; name=&quot;date&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.title&#125; className=&quot;form-control&quot; placeholder=&quot;标题&quot; name=&quot;title&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.account&#125; className=&quot;form-control&quot; placeholder=&quot;账目&quot; name=&quot;account&quot; /&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot; disabled=&#123;!this.valid()&#125; &gt;创建&lt;/button&gt; &lt;/form&gt; ); &#125;&#125; ok,下面是源码:源码地址","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"react-native七牛上传图片","slug":"移动端学习/react-native七牛上传图片","date":"2018-06-25T16:00:00.000Z","updated":"2018-06-26T14:17:32.331Z","comments":true,"path":"2018/06/26/移动端学习/react-native七牛上传图片/","link":"","permalink":"https://pheromone.github.io/2018/06/26/移动端学习/react-native七牛上传图片/","excerpt":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0”","text":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0”首先最大的坑就是七牛官方的这个库:react-native-qiniu,好像是该库的创始人离职了,导致了该库已经荒废,无人更新维护.如果你只是单纯按照github的说明导入该库就使用的话,无论你以什么姿势撸.结果都是Rpc.uploadFile的catch输出错误,错误信息为null………..这个错误信息真让我头大.可喜有人在网上做出了更新,更新代码(需要修改库中的两个源文件../react-native-qiniu/core)如下:rpc.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163import conf from &apos;./conf.js&apos;;import Auth from &apos;./auth&apos;;//发送管理和fop命令,总之就是不上传文件function post(uri, adminToken, content) &#123;var headers = &#123;&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,&#125;;let payload = &#123;headers: headers,method: &apos;POST&apos;,dataType: &apos;json&apos;,timeout: conf.RPC_TIMEOUT,&#125;;if (typeof content === &apos;undefined&apos;) &#123;payload.headers[&apos;Content-Length&apos;] = 0;&#125; else &#123;//carry datapayload.body = content;&#125;if (adminToken) &#123;headers[&apos;Authorization&apos;] = adminToken;&#125;return fetch(uri, payload);&#125;/*** 直传文件* formInput对象如何配置请参考七牛官方文档“直传文件”一节*/function uploadFile(dataParams, policy, callbackUpDate = function () &#123; &#125;, callBackMethod = function () &#123; &#125;) &#123;let params = getParams(dataParams, policy);let uri = params.uri;let data = params.data;let oloaded = null;let responseObj = &#123;&#125;;return new Promise((resolve, reject) =&gt; &#123;if (typeof uri != &apos;string&apos; || uri == &apos;&apos; || typeof data.key == &apos;undefined&apos;) &#123;reject &amp;&amp; reject(null);return;&#125;if (uri[0] == &apos;/&apos;) &#123;uri = &quot;file://&quot; + uri;&#125;//创建xhr并openvar xhr = new XMLHttpRequest();xhr.onreadystatechange = function () &#123;responseObj.readyState = xhr.readyState; //状态0-4responseObj.data = xhr.response;//返回值responseObj.textData = xhr.responseText; //返回值TextresponseObj.status = xhr.status; //状态码// responseObj.message = &quot;&quot;switch (xhr.readyState) &#123;case 0:callBackMethod(responseObj)break;case 1:callBackMethod(responseObj)break;case 2:callBackMethod(responseObj)break;case 3:callBackMethod(responseObj)break;case 4:if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) &#123;if (xhr.status == 200) &#123;callBackMethod(responseObj)&#125;&#125; else &#123;callBackMethod(responseObj)&#125;break;&#125;&#125;;xhr.open(&apos;POST&apos;, conf.UP_HOST);xhr.onload = () =&gt; &#123;if (xhr.status !== 200) &#123;reject &amp;&amp; reject(responseObj);return;&#125;resolve &amp;&amp; resolve(JSON.parse(responseObj.data));&#125;;xhr.onerror = (evt) =&gt; &#123;reject &amp;&amp; reject(evt);return;&#125;; //请求失败xhr.upload.onloadstart = () =&gt; &#123;//上传开始执行方法oloaded = 0;//设置上传开始时，以上传的文件大小为0console(&quot;上传开始&quot;)&#125;;xhr.upload.onprogress = (evt) =&gt; &#123;oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算callbackUpDate(Math.round(oloaded / evt.total * 100), oloaded, evt.total)&#125;;xhr.upload.onloadend = (evt) =&gt; &#123;console(&quot;上传结束&quot;)&#125;;let formdata = creatFormData(params);xhr.send(formdata);&#125;);&#125;//构造上传参数function getParams(data, policy) &#123;let putPolicy = new Auth.Policy(policy);let uptoken = putPolicy.token();data.token = uptoken;let params = &#123;&#125;;params.uri = data.uri;delete data.uri;params.data = data;return params;&#125;/*** 创建一个表单对象,用于上传参数* @param &#123;*&#125; params*/function creatFormData(params) &#123;let formdata = new FormData();let uri = params.uri;let formInput = creatFormInput(uri);let data = params.data;console.log(data)for (let key of Object.keys(data)) &#123;let value = data[key];if (key.charAt(0) === &quot;_&quot;) &#123;formdata.append(&quot;x:&quot; + key.substring(1, key.length), value);&#125; else &#123;formdata.append(key, value);&#125;&#125;formdata.append(&quot;file&quot;, &#123; uri: uri, type: formInput.type, name: formInput.name &#125;);console.log(formdata)return formdata;&#125;/*** 构造表单对象中file对象* @param &#123;*&#125; params*/function creatFormInput(uri) &#123;let formInput = &#123;&#125;;if (typeof formInput.type == &apos;undefined&apos;)formInput.type = &apos;application/octet-stream&apos;;if (typeof formInput.name == &apos;undefined&apos;) &#123;var filePath = uri.split(&quot;/&quot;);if (filePath.length &gt; 0)formInput.name = filePath[filePath.length - 1];elseformInput.name = &quot;&quot;;&#125;return formInput;&#125;export default &#123; uploadFile, post &#125; auth.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152import base64 from &apos;base-64&apos;;import CryptoJS from &quot;crypto-js&quot;;import conf from &quot;./conf.js&quot;;import parse from &apos;url-parse&apos;;function urlsafeBase64Encode(jsonFlags) &#123;var encoded = base64.encode(jsonFlags);return base64ToUrlSafe(encoded);&#125;;function base64ToUrlSafe(v) &#123;return v.replace(/\\//g, &apos;_&apos;).replace(/\\+/g, &apos;-&apos;);&#125;;function hmacSha1(encodedFlags, secretKey) &#123;var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64);return encoded;&#125;;function generateAccessToken(url, body) &#123;var u = parse(url, true);var path = u.pathname;var access = path + &apos;\\n&apos;;if (body) &#123;access += body;&#125;var digest = hmacSha1(access, conf.SECRET_KEY);var safeDigest = base64ToUrlSafe(digest);let token = &apos;QBox &apos; + conf.ACCESS_KEY + &apos;:&apos; + safeDigest;//console.log(token);return token;&#125;;class Policy &#123;constructor(policy) &#123;if (typeof (policy) == &quot;undefined&quot;) &#123;&#125; else &#123;this.policy = policy;if (typeof (policy.deadline) == &quot;undefined&quot; || policy.deadline == null) &#123;this.policy.deadline = 3600 + Math.floor(Date.now() / 1000);&#125;&#125;&#125;_parse2Str(putPolicy) &#123;let str = &quot;&#123;&quot;;let keys = Object.keys(putPolicy);keys.forEach((key, i) =&gt; &#123;let value = putPolicy[key];if (typeof (value) == &quot;object&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:`str = `$&#123;str&#125;&quot;&#123;`Object.keys(value).forEach((key2) =&gt; &#123;let value2 = value[key2];let re = /(\\$\\(.*?\\))/g;if(re.test(value2))&#123;str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:$&#123;value2&#125;,`&#125;else&#123;str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:&quot;$&#123;value2&#125;&quot;,`&#125;&#125;)console.log(keys.length + &quot;::&quot; + i)if (i &gt;= keys.length) &#123;str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;`&#125;else&#123;str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;,`&#125;&#125;else if (typeof (value) == &quot;number&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:$&#123;value&#125;,`&#125;else if (typeof (value) == &quot;string&quot;) &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,`&#125;else &#123;str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,`&#125;&#125;)str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;`;return str;&#125;// _creatStr = (policy) =&gt; &#123;// policy[&apos;deadline&apos;] = this.expires + Math.floor(Date.now() / 1000);// let policyStr = JSON.stringify(policy);// let re = /(\\&quot;\\$\\(.*?\\)\\&quot;)/g;// let newStr = policyStr.replace(re, (value) =&gt; &#123;// return value.substring(1, value.length - 1);// &#125;)// return newStr;// &#125;token = () =&gt; &#123;policStr = this._parse2Str(this.policy);console.log(&quot;policStr&quot;, policStr);var encodedPutPolicy = this._urlsafeBase64Encode(policStr);console.log(&quot;encodedPutPolicy&quot;, encodedPutPolicy);var sign = this._hmacSha1(encodedPutPolicy, conf.SECRET_KEY);var encodedSign = this._base64ToUrlSafe(sign);console.log(&quot;encodedSign&quot;, encodedSign);var uploadToken = conf.ACCESS_KEY + &apos;:&apos; + encodedSign + &apos;:&apos; + encodedPutPolicy;console.log(&quot;uploadToken&quot;, uploadToken);return uploadToken;&#125;_urlsafeBase64Encode = (jsonFlags) =&gt; &#123;var encoded = base64.encode(jsonFlags);return base64ToUrlSafe(encoded);&#125;;_base64ToUrlSafe = (v) =&gt; &#123;return v.replace(/\\//g, &apos;_&apos;).replace(/\\+/g, &apos;-&apos;);&#125;;_hmacSha1 = (encodedFlags, secretKey) =&gt; &#123;var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64);return encoded;&#125;;&#125;class GetPolicy &#123;constructor(expires) &#123;this.expires = expires || 3600;&#125;makeRequest(baseUrl) &#123;var deadline = this.expires + Math.floor(Date.now() / 1000);if (baseUrl.indexOf(&apos;?&apos;) &gt;= 0) &#123;baseUrl += &apos;&amp;e=&apos;;&#125; else &#123;baseUrl += &apos;?e=&apos;;&#125;baseUrl += deadline;var signature = hmacSha1(baseUrl, conf.SECRET_KEY);var encodedSign = base64ToUrlSafe(signature);var downloadToken = conf.ACCESS_KEY + &apos;:&apos; + encodedSign;return baseUrl + &apos;&amp;token=&apos; + downloadToken;&#125;&#125;export default &#123; urlsafeBase64Encode, generateAccessToken, Policy, GetPolicy &#125; ok,改完之后,你就可以愉快的撸自己的业务代码了.至于业务代码我就简单写个例子:其中,Conf.ACCESS_KEY和Conf.SECRET_KEY从七牛账号里面获取,Conf.UP_HOST 从https://developer.qiniu.com/kodo/manual/1671/region-endpoint 里面获取,其中,scope就是七牛里面你自己建立的存储空间名123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107/*** Sample React Native App* https://github.com/facebook/react-native* @flow*/import React, &#123; Component &#125; from &apos;react&apos;;import &#123;Platform,StyleSheet,Text,View,Image&#125; from &apos;react-native&apos;;import Qiniu, &#123; Auth, ImgOps, Conf, Rs, Rpc &#125; from &apos;react-native-qiniu&apos;;//对于七牛修改文件参考: https://blog.csdn.net/qq_33935895/article/details/78775819Conf.ACCESS_KEY = &quot;从七牛账号里面获取&quot;;Conf.SECRET_KEY = &quot;从七牛账号里面获取&quot;;Conf.UP_HOST = &apos;从七牛账号里面获取&apos;; // https://developer.qiniu.com/kodo/manual/1671/region-endpointtype Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123;// 构造constructor(props) &#123;super(props);// 初始状态this.state = &#123;img:&apos;图片url&apos;&#125;;&#125;render() &#123;return (&lt;View style=&#123;styles.container&#125;&gt;&lt;Text style=&#123;styles.instructions&#125; onPress=&#123;()=&gt;this.upload()&#125;&gt;上传&lt;/Text&gt;&lt;Text&gt;&#123;this.state.img&#125;&lt;/Text&gt;&lt;Imagesource=&#123;&#123;uri: this.state.img&#125;&#125;style=&#123;&#123;width:200,height:400&#125;&#125;/&gt;&lt;/View&gt;);&#125;/*** 先上传七牛 获取url* */upload =() =&gt;&#123;var img = &apos;/Users/shaotingzhou/Desktop/qiniuDemo/uploadImg.jpg&apos; //图片路径 如果是从相册获取图片的话,其相册会返回var myDate = new Date();const key = myDate.getTime() + &apos;.jpg&apos;; //上传成功后该key就是图片的url路径//上传参数let params = &#123;uri: img,//图片路径 可以通过第三方工具 如:ImageCropPicker等获取本地图片路径key: key,//要上传的key&#125;//构建上传策略let policy = &#123;scope: &quot;demo&quot;,//记得这里如果格式为&lt;bucket&gt;:&lt;key&gt;形式的话,key要与params里的key保持一致,详见七牛上传策略returnBody://returnBody 详见上传策略&#123;name: &quot;$(fname)&quot;,//获取文件名size: &quot;$(fsize)&quot;,//获取文件大小w: &quot;$(imageInfo.width)&quot;,//...h: &quot;$(imageInfo.height)&quot;,//...hash: &quot;$(etag)&quot;,//...&#125;,&#125;//进行文件上传Rpc.uploadFile(params, policy).then((data) =&gt; &#123;console.log(&apos;上传成功&apos;)var imgUrl = key //七牛上的图片URL 就是之前的key + 你公司域名this.setState(&#123;img: &apos;http://pax8cso07.bkt.clouddn.com/&apos; + key&#125;)&#125;).catch((err) =&gt; &#123;console.log(err)&#125;);&#125;&#125;const styles = StyleSheet.create(&#123;container: &#123;flex: 1,justifyContent: &apos;center&apos;,alignItems: &apos;center&apos;,backgroundColor: &apos;#F5FCFF&apos;,&#125;,welcome: &#123;fontSize: 20,textAlign: &apos;center&apos;,margin: 10,&#125;,instructions: &#123;textAlign: &apos;center&apos;,color: &apos;#333333&apos;,marginBottom: 5,&#125;,&#125;); ok.下面是七牛里面的key对应图,修改后的输出图,最后的例子展示图:下面是源码.其中七牛的修改文件在0.3.0中.源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-navigation前置登录","slug":"移动端学习/react-navigation前置登录","date":"2018-06-15T16:00:00.000Z","updated":"2018-06-16T06:36:06.531Z","comments":true,"path":"2018/06/16/移动端学习/react-navigation前置登录/","link":"","permalink":"https://pheromone.github.io/2018/06/16/移动端学习/react-navigation前置登录/","excerpt":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库.","text":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库. 这里贴一下各库的使用版本: 123456789101112131415161718192021222324252627 &#123; &quot;name&quot;: &quot;lead_the_login&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;mobx&quot;: &quot;^4.3.0&quot;, &quot;mobx-react&quot;: &quot;^5.1.2&quot;, &quot;react&quot;: &quot;16.3.1&quot;, &quot;react-native&quot;: &quot;0.55.4&quot;, &quot;react-navigation&quot;: &quot;1.5.3&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;23.0.1&quot;, &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.5&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;babel-preset-react-native-stage-0&quot;: &quot;^1.0.1&quot;, &quot;jest&quot;: &quot;23.1.0&quot;, &quot;react-test-renderer&quot;: &quot;16.3.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 前置登录主要使用的是react-navigation的tabbar的点击事件. 使用方法可以看 react navigation官方网站 或者 兔佬的简书,至于mbox和react-navigation的使用可以参考之前写的这篇文章:Mobx和react-navigation的使用. 这里不做细说.直接上代码.下面是基本代码结构.准备工作,先把mobx+react-navigation搭建完毕之后.我们在点击我的Tab时,对tabBar点击事件做处理即可,在点击事件里面先获取我们存在Store中的登录状态,根据状态做不同的事情,这里我未处理本地数据持久化工作,只是单纯的存在Mobx中的store中,是为了方便其他地方使用.实际开发中,我们还需要对数据进行持久化操作.主要代码有:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;import &#123; NavigationActions &#125; from &apos;react-navigation&apos;const resetAction = NavigationActions.reset(&#123; index: 0, actions: [ NavigationActions.navigate(&#123;routeName: &apos;Tab&apos;, params: &#123;&#125;&#125;) ]&#125;)@inject(&apos;rootStore&apos;)@observerexport default class TwoView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, tabBarOnPress: (tab) =&gt; &#123; //让tabBar可点击,做前置登录 // navigation.state.params.navigatePress() tab.jumpToIndex(tab.scene.index) &#125;, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text&gt; 登录状态:&#123;this.loginStatus ? &apos;已经登录&apos; : &apos;未登录&apos;&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.loginOutAction()&#125;&gt; 注销 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get loginStatus() &#123; return this.props.rootStore.TwoStore.allDatas.loginStatus; &#125; componentDidMount() &#123; this.props.navigation.setParams(&#123; navigatePress: this.needLogin() &#125;) // 使用这个来调用this &#125; /** * 判断是否需要登录 * */ needLogin =() =&gt;&#123; //判断登录 console.log(&apos;loginStatus&apos;) console.log(this.loginStatus) if(this.loginStatus)&#123; //已经登录 return; &#125;else &#123; //未登录 跳转至登录界面 this.props.navigation.navigate(&apos;LoginView&apos;,&#123;callback:()=&gt;this.getPersonalInfo()&#125;) &#125; &#125; /** * 登录成功的回调方法 * */ getPersonalInfo =() =&gt;&#123; // 请求数据赋值即可 &#125; loginOutAction =() =&gt;&#123; //注销登录 清空本地化数据 和 重置store中的loginStatus this.props.rootStore.TwoStore.allDatas.loginStatus = false this.props.navigation.dispatch(resetAction); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 和登录之后修改store中状态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class LoginView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.loginAction()&#125;&gt; 登录 &lt;/Text&gt; &lt;/View&gt; ); &#125; /** * 登录/注销 可以在store里面执行也可以直接在这里执行,看你习惯 * */ loginAction =() =&gt;&#123; //登录请求 //成功之后,修改loginStatus.本地化数据等等 this.props.rootStore.TwoStore.allDatas.loginStatus = true //返回上一个界面,并回调刷新 this.props.navigation.goBack() this.props.navigation.state.params.callback(); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 效果如图:源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"Mobx + react-navigation的使用","slug":"移动端学习/Mobx-react-navigation的使用","date":"2018-05-26T16:00:00.000Z","updated":"2018-07-29T10:40:49.917Z","comments":true,"path":"2018/05/27/移动端学习/Mobx-react-navigation的使用/","link":"","permalink":"https://pheromone.github.io/2018/05/27/移动端学习/Mobx-react-navigation的使用/","excerpt":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸.","text":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸.Mbox中文文档另外一个基于Mbox和react-navigation的不错项目 废话不多缩,首先,新建一个项目,添加相应库:npm i mobx mobx-react --save 引入Mbox npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev 能够使用@标签 npm i react-navigation --save 引入导航库然后修改一下工程里面的.babelrc: 1234&#123; &quot;presets&quot;: [&quot;react-native&quot;], &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; OK,基本的架子已经搭好.然后新建一个src目录.这里存放基本代码和基本图片之类的. 然后,在入口文件App.js中,先搭建tabBar和导航条.使用react-navigation这里,我使用全局注册并注入mobx，其他地方都可以使用store.import {Provider} from &#39;mobx-react&#39;;然后在src-&gt;Mobx这里新建一个根store的Store.js文件.Store.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; observable, computed, action &#125; from &apos;mobx&apos;import oneInfo from &apos;./OneInfo&apos;import twoInfo from &apos;./TwoInfo&apos;/** * 根store * OneInfo OneInfo数据 * TwoInfo TwoInfo数据*/class RootStore &#123; constructor() &#123; this.OneInfo = new OneInfo(oneInfo,this) this.TwoInfo = new TwoInfo(twoInfo,this) &#125;&#125;// Oneclass OneInfo &#123; @observable allDatas = [] constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125; //加 @action add(num) &#123; this.allDatas.oneNum = num + 1 this.rootStore.TwoInfo.allDatas.twoColor = &apos;red&apos; &#125; //减 @action sub(num) &#123; this.allDatas.oneNum = num - 1 this.rootStore.TwoInfo.allDatas.twoColor = &apos;blue&apos; &#125;&#125;// Twoclass TwoInfo &#123; @observable allDatas = &#123;&#125; constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125;&#125;export default new RootStore() 另外:OneInfo.js 123456789const OneInfo = &#123; &quot;data&quot;: [ ], &quot;isOne&quot; : true, &quot;oneNum&quot; : 0&#125;export default OneInfo; TwoInfo.js 123456789const TwoInfo = &#123; &quot;data&quot;: [ ], &quot;isTwo&quot; : false, &quot;twoColor&quot;:&apos;white&apos;&#125;export default TwoInfo; ok,回到App.js中: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123;Component&#125; from &apos;react&apos;;import &#123;Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123;StackNavigator, TabNavigator, TabBarBottom&#125; from &apos;react-navigation&apos;;// 全局注册并注入mobx，其他地方都可以使用storeimport &#123;Provider&#125; from &apos;mobx-react&apos;;// 获取store实例import store from &apos;./src/Mobx/Store&apos;;import One from &apos;./src/One/One&apos;;import Two from &apos;./src/Two/Two&apos;;export default class TwoDetails extends Component&lt;Props&gt; &#123; render () &#123; return ( &lt;Provider rootStore=&#123;store&#125;&gt; &lt;Navigator onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123; // 只要切换tab,push,pop,这里一定走 console.log (prevState); console.log (currentState); &#125;&#125; /&gt; &lt;/Provider&gt; ); &#125; componentDidMount = () =&gt; &#123; console.disableYellowBox = true; //去除黄色弹框警告 &#125;;&#125;const Tab = TabNavigator ( &#123; One: &#123; screen: One, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &apos;男孩&apos;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&apos;./src/Image/boy_active.png&apos;) : require (&apos;./src/Image/boy.png&apos;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, Two: &#123; screen: Two, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &apos;女孩&apos;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&apos;./src/Image/girl_active.png&apos;) : require (&apos;./src/Image/girl.png&apos;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, &#125;, &#123; tabBarComponent: TabBarBottom, tabBarPosition: &apos;bottom&apos;, swipeEnabled: true, animationEnabled: true, lazy: true, tabBarOptions: &#123; activeTintColor: &apos;#979797&apos;, inactiveTintColor: &apos;#979797&apos;, style: &#123;backgroundColor: &apos;#ffffff&apos;&#125;, &#125;, &#125;);const Navigator = StackNavigator (&#123; Tab: &#123; screen: Tab, &#125;,&#125;);const styles = StyleSheet.create (&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 然后就是基本的UI界面了:One.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class One extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123;&#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.add()&#125;&gt; + 红 &lt;/Text&gt; &lt;Text&gt; One &#123;this.dataSource&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.sub()&#125;&gt; - 蓝 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get dataSource() &#123; return this.props.rootStore.OneInfo.allDatas.oneNum; &#125; /** * + * */ @action add() &#123; this.props.rootStore.OneInfo.add(this.dataSource) &#125; /** * - * */ @action sub() &#123; this.props.rootStore.OneInfo.sub(this.dataSource) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); Two.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;import &#123; observer, inject &#125; from &apos;mobx-react&apos;import &#123; action, autorun, computed &#125; from &apos;mobx&apos;@inject(&apos;rootStore&apos;)@observerexport default class Two extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;[styles.container,&#123;backgroundColor:this.bgColor&#125;]&#125;&gt; &lt;Text&gt; TWO &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get bgColor() &#123; return this.props.rootStore.TwoInfo.allDatas.twoColor; &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); ok,以上就是Mbox+react-navigation的Demo的基本代码了.效果图: 源码 另外:redux+react-navigation另外:dva+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"前端马赛克学习","slug":"前端学习/马赛克学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-17T13:45:31.367Z","comments":true,"path":"2018/03/18/前端学习/马赛克学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/前端学习/马赛克学习/","excerpt":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克.","text":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克.完成的功能 选择当地一张图片 点击绘制马赛克 拖动绘制马赛克 为了方便,相关js代码直接写在了index.html中,大致分为加载图片,添加监听,方法触发,绘制小方块(马赛克),计算颜色,数组升维这几个方法,UI部分通过canvas 标签和input 标签绘制.下面是完整的index.html代码 &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;Keywords&quot; content=&quot;马赛克 canvas&quot;&gt; &lt;meta name=&quot;Description&quot; content=&quot;学习前端马赛克&quot;&gt; &lt;/head&gt; &lt;style&gt; canvas { border: 1px black solid; } &lt;/style&gt; &lt;body&gt; &lt;div id=&quot;mask&quot;&gt; &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt; &lt;/canvas&gt; &lt;input type=&quot;file&quot; class=&apos;input&apos;&gt; &lt;/div&gt; &lt;script&gt; var canvas = document.querySelector(&apos;canvas&apos;); var input = document.querySelector(&apos;#mask .input&apos;); var ctx = canvas.getContext(&apos;2d&apos;); var mousedown = false; var t = 15; input.onchange = function () { loadimg(); } /** *加载图片 */ function loadimg() { var img = new Image(); img.src = window.URL.createObjectURL(input.files[0]); img.onload = function () { ctx.drawImage(img, 0, 0, 600, 600); } register(); } /** *添加监听 */ function register() { canvas.addEventListener(&apos;mousedown&apos;, action) canvas.addEventListener(&apos;mousemove&apos;, action) canvas.addEventListener(&apos;mouseup&apos;, action) } /** *方法触发 */ function action(e) { var dx = parseInt(((e.offsetX - t / 2) / t) * t) var dy = parseInt(((e.offsetY - t / 2) / t) * t) if (e.type == &quot;mousedown&quot;) { mousedown = true; computeColor(dx, dy); } if (mousedown &amp;&amp; e.type == &quot;mousemove&quot;) { computeColor(dx, dy); } if (e.type == &quot;mouseup&quot;) { mousedown = false; } } /* * 画小方块 */ function rect(x, y, c) { ctx.beginPath(); ctx.fillStyle = c; var dx = parseInt(x / t)*t,dy = parseInt(y / t)*t ctx.rect(dx, dy, t, t); ctx.fill(); } /** 计算颜色 */ function computeColor(x, y) { var arrList = restore(ctx.getImageData(x,y,t,t).data,4); //一维数组 var vr = 0, vg = 0, vb = 0,al = arrList.length; for(var i = 0; i &lt; al; i++){ vr += arrList[i][0]; vg += arrList[i][1]; vb += arrList[i][2]; var color = &apos;rgb(&apos; + Math.floor(vr/al) + &apos;,&apos; + Math.floor(vg/al) + &apos;,&apos; + Math.floor(vb/al) + &apos;)&apos;; rect(x,y,color); } } /** *数组升维 [1,2,3,4] =&gt; [[1,2],[3,4]] */ function restore(arr, step) { var list = []; var index = 0; var n = Math.floor(arr.length/step); for(var i = 0; i &lt; n ;i++){ list.push(arr.slice(index,index+step)); index += step; } return list; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 效果图: 是不是特别棒,再也不为女朋友照片的隐私犯愁了.ps:现在就差个女朋友了 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"Android和React Native的简单交互","slug":"移动端学习/Android和React Native的简单交互","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:51:33.638Z","comments":true,"path":"2018/03/18/移动端学习/Android和React Native的简单交互/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/Android和React Native的简单交互/","excerpt":"首先在Android原生中.新建class文件TransMissonMoudle:","text":"首先在Android原生中.新建class文件TransMissonMoudle: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Created by shaotingzhou on 2018/3/7. */package com.androidrn.RN;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.WritableMap;import com.facebook.react.bridge.WritableNativeMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import java.text.SimpleDateFormat;import java.util.Date;import javax.annotation.Nullable;public class TransMissonMoudle extends ReactContextBaseJavaModule &#123; private static final String REACT_CLASS = &quot;TransMissonMoudle&quot;; private ReactContext mReactContext; public TransMissonMoudle(ReactApplicationContext reactContext) &#123; super(reactContext); this.mReactContext = reactContext; &#125; @Override public String getName() &#123; return REACT_CLASS; &#125; //延迟0.1秒获取时间。 @ReactMethod public void getTime() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; String time = getTimeMillis(); WritableMap writableMap = new WritableNativeMap(); writableMap.putString(&quot;key&quot;, time); sendTransMisson(mReactContext, &quot;EventName&quot;, writableMap); &#125; &#125;).start(); &#125; private String getTimeMillis() &#123; SimpleDateFormat formatDate = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); Date date = new Date(System.currentTimeMillis()); String time = formatDate.format(date); return time; &#125; /** * RCTDeviceEventEmitter方式 * * @param reactContext * @param eventName 事件名 * @param params 传惨 */ public void sendTransMisson(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName, params); &#125; /** * CallBack方式 * * @param name * @param callback */ @ReactMethod public void callBackTime(String name, Callback callback) &#123; callback.invoke(getTimeMillis()); &#125; /** * Promise方式 * @param name * @param promise */ @ReactMethod public void sendPromiseTime(String name, Promise promise) &#123; WritableMap writableMap=new WritableNativeMap(); writableMap.putString(&quot;age&quot;,&quot;20&quot;); writableMap.putString(&quot;time&quot;,getTimeMillis()); promise.resolve(writableMap); &#125;&#125; 再建class文件TransMissonPackage: 1234567891011121314151617181920212223242526272829303132333435363738package com.androidrn.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * Created by shaotingzhou on 2018/3/7. */public class TransMissonPackage implements ReactPackage &#123; @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); modules.add(new TransMissonMoudle(reactContext));//摇一摇 return modules; &#125;// @Override// public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;// return Collections.emptyList();// &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; List&lt;ViewManager&gt; viewManagerList=new ArrayList&lt;&gt;();// viewManagerList.add(new PTRRefreshManager()); return viewManagerList; &#125;&#125; 接着在MainApplication里引入TransMissonPackage,加入包.如 import com.androidrn.RN.TransMissonPackage; new TransMissonPackage()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.androidrn;import android.app.Application;import com.androidrn.RN.TransMissonPackage;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import java.util.Arrays;import java.util.List;public class MainApplication extends Application implements ReactApplication &#123; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new TransMissonPackage() ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; @Override public void onCreate() &#123; super.onCreate(); SoLoader.init(this, /* native exopackage */ false); &#125;&#125; 我的文件放置情况如图: 然后只需要在RN这边:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &apos;react&apos;;import &#123; AppRegistry, StyleSheet, Text, View, DeviceEventEmitter, NativeModules, ToastAndroid, Platform&#125; from &apos;react-native&apos;;const instructions = Platform.select(&#123; ios: &apos;Press Cmd+R to reload,\\n&apos; + &apos;Cmd+D or shake for dev menu&apos;, android: &apos;Double tap R on your keyboard to reload,\\n&apos; + &apos;Shake or press menu button for dev menu&apos;,&#125;);type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; componentWillMount() &#123; DeviceEventEmitter.addListener(&apos;EventName&apos;, function (msg) &#123; console.log(&apos;DeviceEventEmitter收到消息&apos;+msg); alert(&apos;DeviceEventEmitter收到消息&apos;+ msg.key) &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getDeviceEventEmitterTime.bind(this)&#125; &gt; RCTDeviceEventEmitter获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getCallBackTime.bind(this)&#125; &gt; CallBack获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getPromiseTime.bind(this)&#125; &gt; Promise获取时间 &lt;/Text&gt; &lt;/View&gt; ); &#125; getDeviceEventEmitterTime() &#123; NativeModules.TransMissonMoudle.getTime(); &#125; getCallBackTime() &#123; NativeModules.TransMissonMoudle.callBackTime(&quot;Allure&quot;, (msg) =&gt; &#123; console.log(&apos;callBack:---&apos; + msg); alert(&apos;callBack:---&apos;+msg) &#125; ); &#125; getPromiseTime() &#123; NativeModules.TransMissonMoudle.sendPromiseTime(&quot;Allure&quot;).then(msg=&gt; &#123; console.log(&quot;年龄:&quot; + msg.age + &quot;/n&quot; + &quot;时间:&quot; + msg.time); alert(&quot;年龄&quot; + msg.age + &quot;时间&quot; + msg.time) this.setState(&#123; age: msg.age, time: msg.time, &#125;) &#125;).catch(error=&gt; &#123; console.log(&apos;错误&apos; + error); &#125;); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 源码 效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"前端精灵图学习","slug":"前端学习/精灵图学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-17T13:54:44.185Z","comments":true,"path":"2018/03/18/前端学习/精灵图学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/前端学习/精灵图学习/","excerpt":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。","text":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。以本地图片为例:精灵图使用其实就是对background-position:x y对图片进行偏移显示而已.下面是代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;html&gt; &lt;head&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; .div0&#123; margin:10px; &#125; .demo1,.demo2,.demo3,.demo4,.demo5,.demo6&#123; display:inline-block; width:17px; height:17px; background-color:transparent; background-image:url(img/精灵图.png); background-repeat:no-repeat; &#125; .demo1&#123; background-position:-38px -37px;&#125; .demo2&#123; background-position:-62px -37px;&#125; .demo3&#123; background-position:-86px -37px;&#125; .demo4&#123; background-position:-110px -37px;&#125; .demo5&#123; background-position:-134px -37px;&#125; .demo6&#123; background-position:-159px -37px;&#125; ul&#123; list-style:none; &#125; ul li &#123; margin:10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;div0&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt; 图标1&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt; 图标2&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt; 图标3&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo4&quot;&gt;&lt;/div&gt; 图标4&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo5&quot;&gt;&lt;/div&gt; 图标5&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo6&quot;&gt;&lt;/div&gt; 图标6&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图: 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/categories/前端学习/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://pheromone.github.io/tags/前端学习/"}]},{"title":"其他学习","slug":"其他学习/其他学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:25:38.036Z","comments":true,"path":"2018/03/18/其他学习/其他学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/其他学习/其他学习/","excerpt":"加紧施工中…","text":"加紧施工中…","categories":[{"name":"其他学习","slug":"其他学习","permalink":"https://pheromone.github.io/categories/其他学习/"}],"tags":[{"name":"其他学习","slug":"其他学习","permalink":"https://pheromone.github.io/tags/其他学习/"}]},{"title":"后端学习","slug":"后端学习/后端学习","date":"2018-03-18T08:18:48.245Z","updated":"2018-05-16T05:31:45.728Z","comments":true,"path":"2018/03/18/后端学习/后端学习/","link":"","permalink":"https://pheromone.github.io/2018/03/18/后端学习/后端学习/","excerpt":"加紧施工中…","text":"加紧施工中…","categories":[{"name":"后端学习","slug":"后端学习","permalink":"https://pheromone.github.io/categories/后端学习/"}],"tags":[{"name":"后端学习","slug":"后端学习","permalink":"https://pheromone.github.io/tags/后端学习/"}]},{"title":"redux和react-navigation的结合使用","slug":"移动端学习/redux和react-navigation的结合使用","date":"2018-03-18T08:16:47.866Z","updated":"2018-07-29T10:36:14.785Z","comments":true,"path":"2018/03/18/移动端学习/redux和react-navigation的结合使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/redux和react-navigation的结合使用/","excerpt":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.","text":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.我代码的目录结构是: 使用的三方库是:1234567891011121314151617181920212223242526272829&#123; &quot;name&quot;: &quot;RN_nav&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;react&quot;: &quot;16.3.0-alpha.1&quot;, &quot;react-native&quot;: &quot;0.54.0&quot;, &quot;react-navigation&quot;: &quot;^1.5.1&quot;, &quot;react-navigation-redux-helpers&quot;: &quot;^1.0.3&quot;, &quot;react-redux&quot;: &quot;^5.0.7&quot;, &quot;redux&quot;: &quot;^3.7.2&quot;, &quot;redux-actions&quot;: &quot;^2.3.0&quot;, &quot;redux-logger&quot;: &quot;^3.0.6&quot;, &quot;redux-thunk&quot;: &quot;^2.2.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;22.4.1&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;jest&quot;: &quot;22.4.2&quot;, &quot;react-test-renderer&quot;: &quot;16.3.0-alpha.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 下面是各文件的源码.App.js1234567891011121314151617181920/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React,&#123; Component &#125; from &apos;react&apos;;import &#123;Provider&#125; from &apos;react-redux&apos;;import store from &apos;./src/store&apos;;import NavigatorPages from &apos;./src/AllPages/TabNavigatorPage&apos;;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Provider store=&#123;store&#125;&gt; &lt;NavigatorPages/&gt; &lt;/Provider&gt; ); &#125;&#125; Allreducerstore.js123456789101112131415161718192021import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;//中间件import logger from &apos;redux-logger&apos;;import thunk from &apos;redux-thunk&apos;;import &#123; createReduxBoundAddListener, createReactNavigationReduxMiddleware,&#125; from &apos;react-navigation-redux-helpers&apos;;//reducersimport reducers from &apos;./Allreducer/index&apos;;//引用react-navigation-redux-helpers组件手动创建中间件,接受state并返回新的state,让路由刷新// Note: createReactNavigationReduxMiddleware must be run before createReduxBoundAddListenerconst middleware = createReactNavigationReduxMiddleware( &quot;App&quot;, state =&gt; state.nav,);export const addListener = createReduxBoundAddListener(&quot;App&quot;);const middleWares = [middleware,thunk,logger];export default applyMiddleware(...middleWares)(createStore)(reducers); FirstPageReducer.js1234567891011121314151617181920212223import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; zglNum:0&#125;;export default handleActions(&#123; ADD:(state,action)=&gt;&#123; // alert(state.zglNum) return &#123; ...state, zglNum:state.zglNum + 1, secondState:&apos;iOS&apos; &#125; &#125;, SUB:(state,action)=&gt;&#123; return &#123; ...state, zglNum:state.zglNum - 1, secondState:&apos;Android&apos; &#125; &#125;&#125;,initialState); SecondPageReducer.js12345678910111213141516/** * Created by shaotingzhou on 2018/3/6. */import &#123;handleActions&#125; from &apos;redux-actions&apos;;const initialState = &#123; xxx:0&#125;;export default handleActions(&#123; SECOND:(state,action)=&gt;&#123; return &#123; ...state, xxx:2 &#125; &#125;,&#125;,initialState); index.js12345678910import &#123; combineReducers &#125; from &apos;redux&apos;;import TabNavigatorReducer from &apos;./TabNavigatorReducer&apos;;import FirstPageReducer from &apos;./FirstPageReducer&apos;;import SecondPageReducer from &apos;./SecondPageReducer&apos;;const reducers = combineReducers(&#123; TabNavigatorReducer, FirstPageReducer, SecondPageReducer,&#125;);export default reducers; AllPagesFirstPage.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;ADD,SUB&#125; from &apos;../Actions/FirstPageActions&apos;;class FirstPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;首页&apos;, &#125;; // componentWillUpdate()&#123; // alert(this.props.status); // // &#125; // componentDidUpdate()&#123; // alert(this.props.status); // &#125; // ES6 props // static defaultProps=&#123; // zglNum:0, // &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(ADD()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; + &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; &#123;this.props.zglNum&#125; &lt;/Text&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(SUB()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; - &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; zglNum: store.FirstPageReducer.zglNum //数字&#125;);export default connect(mapStateToProps)(FirstPage); SecondPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import &#123;SECOND&#125; from &apos;../Actions/SecondPageActions&apos;;class SecondPage extends PureComponent &#123; static navigationOptions = &#123; title:&apos;第二&apos; &#125;; // ES6 props static defaultProps=&#123; secondState:&apos;默认&apos;, &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125; &gt; &lt;Text onPress=&#123;()=&gt;this.onClick()&#125;&gt;&#123;this.props.secondState&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125; onClick =() =&gt;&#123; this.props.navigation.navigate(&apos;Snnn&apos;) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &apos;center&apos;, margin: 10, color:&apos;red&apos; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; secondState:store.FirstPageReducer.secondState&#125;);export default connect(mapStateToProps)(SecondPage); NavigatorPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123; Component &#125; from &apos;react&apos;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &apos;react-native&apos;;import FirstPage from &apos;./FirstPage&apos;;import SecondPage from &apos;./SecondPage&apos;;import &#123;connect&#125; from &apos;react-redux&apos;;import Snnn from &apos;./Snnn&apos;import &#123; StackNavigator, addNavigationHelpers, TabNavigator,&#125; from &apos;react-navigation&apos;;import &#123;addListener&#125; from &apos;../store&apos;;class NavigatorPages extends Component&#123; constructor(props)&#123; super(props); &#125; render()&#123; return( &lt;SimpleAppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch: this.props.dispatch, state: this.props.nav, addListener &#125;)&#125; /&gt; ) &#125;&#125;const Tab = TabNavigator(&#123; page1: &#123; screen: FirstPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;苹果233&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/one_selected.png&apos;) : require(&apos;../../image/one.png&apos;)&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;, page2: &#123; screen: SecondPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &apos;安卓&apos;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&apos;../../image/two_selected.png&apos;) : require(&apos;../../image/two.png&apos;) &#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;,&#125;,&#123; initialRouteName: &apos;page1&apos;, swipeEnabled: true, animationEnabled: true, tabBarPosition:&apos;bottom&apos;, lazy: false, tabBarOptions: &#123; showIcon: true, activeTintColor: &apos;#979797&apos;, inactiveTintColor: &apos;#979797&apos;, style: &#123; backgroundColor: &apos;#ffffff&apos; &#125;, &#125;&#125;);export const SimpleAppNavigator = StackNavigator(&#123; Tab: &#123; screen: Tab, &#125;, page1 : &#123; screen: FirstPage, &#125;, page2 : &#123; screen: SecondPage &#125;, Snnn : &#123; screen: Snnn &#125;&#125;);const mapStateToProps = (store)=&gt;(&#123; nav : store.TabNavigatorReducer,&#125;);export default connect(mapStateToProps)(NavigatorPages); ActionsActionsTypes.js12345//Tab1export const ADD = &apos;ADD&apos;;export const SUB = &apos;SUB&apos;;//Tab2 FirstPageActions.js1234import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;;export const ADD = createAction(TYPES.ADD);export const SUB = createAction(TYPES.SUB); SccondPageActions.js12345/** * Created by shaotingzhou on 2018/3/6. */import &#123;createAction&#125; from &apos;redux-actions&apos;;import * as TYPES from &apos;./ActionTypes&apos;; 源码效果图: 另外:dva+react-navigation另外:Mbox+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-native-router-flux初步认识","slug":"移动端学习/react-native-router-flux初步认识","date":"2018-03-18T08:16:47.866Z","updated":"2018-05-25T18:49:34.276Z","comments":true,"path":"2018/03/18/移动端学习/react-native-router-flux初步认识/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/react-native-router-flux初步认识/","excerpt":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31","text":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31效果图:使用方法请参考:参考1参考2我这里不详细说明了,贴出关键代码一看便知.代码基本结构如下: App.js: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &apos;react-native&apos;;import &#123; Navigation, Scene, Router, Modal&#125; from &apos;react-native-router-flux&apos;;import IOS from &apos;./src/ios&apos;;import Android from &apos;./src/android&apos;import Web from &apos;./src/web&apos;import TabIcon from &apos;./src/TabIcon&apos;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Router&gt; &lt;Modal&gt; &lt;Scene key=&quot;root&quot; tabBarPosition=&quot;bottom&quot; tabs&gt; &lt;Scene hideBackImage key=&quot;IOS&quot; title=&quot;苹果&quot; component=&#123;IOS&#125; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/ios.png&apos;)&#125; selectedImage=&#123;require(&apos;./src/image/ios_active.png&apos;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Web&quot; component=&#123;Web&#125; title=&quot;web&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/web.png&apos;)&#125; showLabel = &#123;false&#125; selectedImage=&#123;require(&apos;./src/image/web_active.png&apos;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Android&quot; component=&#123;Android&#125; title=&quot;安卓&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&apos;./src/image/android.png&apos;)&#125; hideNavBar=&#123;true&#125; //隐藏导航栏 selectedImage=&#123;require(&apos;./src/image/android_active.png&apos;)&#125; /&gt; &lt;/Scene&gt; &lt;/Modal&gt; &lt;/Router&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; tabbarContainer: &#123; flex: 1, backgroundColor: &quot;#f6f6f6&quot;, overflow: &apos;visible&apos; &#125;, tabIconItem: &#123; flex: 1, height: 56, flexDirection: &apos;column&apos;, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 8, paddingRight: 8, backgroundColor: &apos;transparent&apos;, overflow: &apos;visible&apos; &#125;, tabIconImage: &#123; width: 60, height: 60, overflow: &apos;visible&apos; &#125;,&#125;); TabIcon.js 12345678910111213141516171819202122232425262728293031323334353637383940414243import React, &#123;PropTypes, Component&#125; from &apos;react&apos;import &#123;Text, View, Image, StyleSheet&#125; from &apos;react-native&apos;const tabIconStyles = StyleSheet.create(&#123; tabIconItem: &#123; flex: 1, height: 56, flexDirection: &apos;column&apos;, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 8, paddingRight: 8, backgroundColor: &apos;transparent&apos;, &#125;, tabIconImage: &#123; width: 24, height: 24 &#125;, titleText: &#123; marginTop: 5, textAlign: &apos;center&apos;, fontSize: 11 &#125;, titleTextDefaultColor: &#123; color: &apos;black&apos; &#125;, titleTextSelectColor: &#123; color: &apos;red&apos; &#125;, tabItemRow: &#123; flexDirection: &apos;row&apos; &#125;,&#125;);export default TabIcon=(props)=&gt;&#123; return ( &lt;View style=&#123;tabIconStyles.tabIconItem&#125;&gt; &lt;Image style=&#123;tabIconStyles.tabIconImage&#125; source=&#123;props.focused ? props.selectedImage : props.Image&#125;/&gt; &lt;Text&gt;&#123;props.tabTitle&#125;&lt;/Text&gt; &lt;/View&gt; );&#125;; 而至于ios.js,web.js,android.js只是基本的模板界面 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View&#125; from &apos;react-native&apos;;type Props = &#123;&#125;;export default class IOS extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; 首页 &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#F5FCFF&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, instructions: &#123; textAlign: &apos;center&apos;, color: &apos;#333333&apos;, marginBottom: 5, &#125;,&#125;); 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]},{"title":"react-navigation的基本使用","slug":"移动端学习/react-navigation的基本使用","date":"2018-03-18T06:50:06.825Z","updated":"2018-05-15T18:41:51.541Z","comments":true,"path":"2018/03/18/移动端学习/react-navigation的基本使用/","link":"","permalink":"https://pheromone.github.io/2018/03/18/移动端学习/react-navigation的基本使用/","excerpt":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.","text":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.实现的基本功能 tabBar 导航栏 在static中使用this 回调 跳多级界面 防止连续点击多次跳转界面并且上面这些方法均未修改三方库的源码,原先需要修改源码实现:原版对于react-navigation的使用看官方文档即可.防止连续点击多次跳转界面 通过state判断:先定义个state waiting 为 false ,再定义点击事件的 disabled={this.state.waiting} ,在响应方法里面先行修改statewaiting 为 true,然后跳转界面,最后在下方定一个计时器,2秒后再次修改state 为false 即可.完整代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Platform, StyleSheet, Text, View, Image, TouchableOpacity&#125; from &apos;react-native&apos;;type Props = &#123;&#125;;export default class OneDetails extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; waiting:false//防止多次重复点击 &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;this.onclickBtn()&#125; disabled=&#123;this.state.waiting&#125;&gt; &lt;Text&gt;点击跳转&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125; onclickBtn =() =&gt;&#123; this.setState(&#123;waiting: true&#125;); this.props.navigation.navigate(&apos;OneDetailsFlat&apos;) setTimeout(()=&gt; &#123; this.setState(&#123;waiting: false&#125;) &#125;, 2000);//2秒后重置state中的waiting状态 &#125;&#125; 在static中使用this 先在componentDidMount里123456//设置在static中使用this componentDidMount()&#123; this.props.navigation.setParams(&#123; navigatePress:this.navigatePress &#125;) &#125; 然后就可以:123456789static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123; title: &apos;ListView&apos;, headerStyle:&#123;backgroundColor:&apos;red&apos;&#125;, headerRight:( &lt;Text onPress=&#123;()=&gt;navigation.state.params.navigatePress()&#125;&gt; 点击 &lt;/Text&gt; ) &#125;); 使用:1234//导航条按钮点击 navigatePress = () =&gt; &#123; alert(this.state.text) &#125; 回调 在A push 到 B的时候先行定义个方法,然后在B pop 回A调用即可.A -&gt; B1234567891011//导航条按钮点击navigatePress = () =&gt; &#123; this.props.navigation.navigate(&apos;OneDetailsFlatDetails&apos;,&#123; // 跳转的时候携带一个参数去下个页面 callback: (data)=&gt;&#123; alert(data) &#125; &#125;);&#125; B -&gt; A1234popTwo =() =&gt;&#123; this.props.navigation.state.params.callback(&apos;回调参数&apos;); this.props.navigation.goBack() &#125; 回到首页 this.props.navigation.popToTop()回到相应页 this.props.navigation.pop(2)效果图: 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/categories/移动端学习/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://pheromone.github.io/tags/移动端学习/"}]}]}